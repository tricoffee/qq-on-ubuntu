source ~/.profile 
二進位格式檔案 ld.so.cache 符合
profile.d/cedilla-portuguese.sh:6:# File: /etc/profile.d/cedilla-portuguese.sh
dbus-1/system.d/bluetooth.conf:18:    <allow send_interface="org.bluez.Profile1"/>
dbus-1/system.d/org.freedesktop.ColorManager.conf:24:           send_interface="org.freedesktop.ColorManager.Profile"/>
init/rsyslog.conf:15:    /lib/init/apparmor-profile-load usr.sbin.rsyslogd
init/apparmor.conf:1:description "Pre-cache and pre-load apparmor profiles"
init/apparmor.conf:32:        # "$PROFILES_CACHE_VAR" itself  (on Touch flavors
init/apparmor.conf:48:    if [ -x /usr/bin/aa-clickhook ] || [ -x /usr/bin/aa-profile-hook ] ; then
init/apparmor.conf:52:        force_profile_hook=0
init/apparmor.conf:61:            force_profile_hook=1
init/apparmor.conf:66:        if [ -x /usr/bin/aa-profile-hook ] && ([ $force_profile_hook -eq 1 ] || [ $apparmor_was_updated -eq 1 ]) ; then
init/apparmor.conf:67:            aa-profile-hook -f
init/apparmor.conf:72:        running_profile_names | while read profile; do
init/apparmor.conf:73:            unload_profile "$profile"
init/apparmor.conf:85:        load_configured_profiles
init/apparmor.conf:86:	unload_obsolete_profiles
init/apparmor.conf:93:    # policy from cache, while fairly fast (<2 seconds for 250 profiles on
init/apparmor.conf:97:    load_configured_profiles
init/avahi-daemon.conf:16:    /lib/init/apparmor-profile-load usr.sbin.avahi-daemon
init/gdm3.conf:60:    test -f /etc/profile && . /etc/profile
init/gdm3.conf:71:    # update the dconf profile if needed
init/network-interface-security.conf:3:# This is a one-time start-up script to load AppArmor profiles needed
init/network-interface-security.conf:25:# Since we need these profiles to be loaded before any of the above services
init/cups.conf:28:    if [ -x /lib/init/apparmor-profile-load ]; then
init/cups.conf:29:	/lib/init/apparmor-profile-load usr.sbin.cupsd
init/cups-browsed.conf:15:    if [ -x /lib/init/apparmor-profile-load ]; then
init/cups-browsed.conf:16:        /lib/init/apparmor-profile-load usr.sbin.cups-browsed
bash.bashrc:4:# this file has to be sourced in /etc/profile.
bash.bashrc:18:# set a fancy prompt (non-color, overwrite the one in /etc/profile)
apparmor.d/sbin.dhclient:54:  # executing them, so we can't just use a separate profile for dhclient-script
apparmor.d/sbin.dhclient:62:  # Run the ELF executables under their own unrestricted profiles
apparmor.d/usr.sbin.cupsd:146:  profile third_party flags=(attach_disconnected) {
apparmor.d/usr.sbin.cupsd:164:# separate profile since this needs to write into /home
apparmor.d/usr.lib.snapd.snap-confine:55:    # changing profile
apparmor.d/usr.lib.snapd.snap-confine:57:    # Reading current profile
apparmor.d/usr.lib.snapd.snap-confine:65:    # Don't allow changing profile to unconfined or profiles that start with
apparmor.d/usr.lib.snapd.snap-confine:71:    change_profile unsafe /** -> [^u/]**,
apparmor.d/usr.lib.snapd.snap-confine:72:    change_profile unsafe /** -> u[^n]**,
apparmor.d/usr.lib.snapd.snap-confine:73:    change_profile unsafe /** -> un[^c]**,
apparmor.d/usr.lib.snapd.snap-confine:74:    change_profile unsafe /** -> unc[^o]**,
apparmor.d/usr.lib.snapd.snap-confine:75:    change_profile unsafe /** -> unco[^n]**,
apparmor.d/usr.lib.snapd.snap-confine:76:    change_profile unsafe /** -> uncon[^f]**,
apparmor.d/usr.lib.snapd.snap-confine:77:    change_profile unsafe /** -> unconf[^i]**,
apparmor.d/usr.lib.snapd.snap-confine:78:    change_profile unsafe /** -> unconfi[^n]**,
apparmor.d/usr.lib.snapd.snap-confine:79:    change_profile unsafe /** -> unconfin[^e]**,
apparmor.d/usr.lib.snapd.snap-confine:80:    change_profile unsafe /** -> unconfine[^d]**,
apparmor.d/usr.lib.snapd.snap-confine:81:    change_profile unsafe /** -> unconfined?**,
apparmor.d/usr.lib.snapd.snap-confine:84:    change_profile unsafe /** -> {u,un,unc,unco,uncon,unconf,unconfi,unconfin,unconfine},
apparmor.d/usr.lib.snapd.snap-confine:87:    # deny change_profile unsafe /** -> {unconfined,/**},
apparmor.d/usr.lib.snapd.snap-confine:88:    # change_profile unsafe /** -> **,
apparmor.d/usr.lib.snapd.snap-confine:91:    /{tmp/snap.rootfs_*/,}var/lib/snapd/seccomp/profiles/* r,
apparmor.d/usr.lib.snapd.snap-confine:93:    # reading mount profiles
apparmor.d/usr.lib.snapd.snap-confine:199:    # Support mount profiles via the content interface. This should correspond
apparmor.d/abstractions/ubuntu-browsers.d/text-editors:3:# in the toplevel profile. Eg:
apparmor.d/abstractions/ubuntu-browsers.d/ubuntu-integration:3:# in the toplevel profile. Eg:
apparmor.d/abstractions/ubuntu-browsers.d/productivity:3:# in the toplevel profile. Eg:
apparmor.d/abstractions/ubuntu-browsers.d/multimedia:3:# in the toplevel profile. Eg:
apparmor.d/abstractions/ubuntu-browsers.d/kde:3:# in the toplevel profile. Eg:
apparmor.d/abstractions/ubuntu-browsers.d/java:18:  # Profile for the supported OpenJDK in Ubuntu. This doesn't require the
apparmor.d/abstractions/ubuntu-browsers.d/java:20:  # profile.
apparmor.d/abstractions/ubuntu-browsers.d/java:21:  profile browser_openjdk {
apparmor.d/abstractions/ubuntu-browsers.d/java:62:  # Profile for commercial Javas. These need workarounds to work right (eg
apparmor.d/abstractions/ubuntu-browsers.d/java:64:  profile browser_java {
apparmor.d/abstractions/base:15:  # (Note that the ldd profile has inlined this file; if you make
apparmor.d/abstractions/base:17:  # profile as well.)
apparmor.d/abstractions/base:85:  # best place -- but many profiles require it, and it is quite harmless.
apparmor.d/abstractions/base:124:  ptrace (read) peer=@{profile_name},
apparmor.d/abstractions/base:130:  signal peer=@{profile_name},
apparmor.d/abstractions/base:136:  unix peer=(label=@{profile_name}),
apparmor.d/abstractions/base:149:  # Ubuntu profiles because the user is expected to have access to files owned
apparmor.d/abstractions/base:150:  # by him/her. Exceptions to this are explicit in the profiles. While this rule
apparmor.d/abstractions/ubuntu-helpers:1:# Lenient profile that is intended to be used when 'Ux' is desired but
apparmor.d/abstractions/ubuntu-helpers:3:# open profile that blacklists certain known dangerous files and also
apparmor.d/abstractions/ubuntu-helpers:6:# protection, please use with care as applications running under this profile
apparmor.d/abstractions/ubuntu-helpers:7:# are effectively running without any AppArmor protection. Use this profile
apparmor.d/abstractions/ubuntu-helpers:11:# Because this abstraction defines the sanitized_helper profile, it must only
apparmor.d/abstractions/ubuntu-helpers:31:# Use at your own risk. This profile was developed as an interim workaround for
apparmor.d/abstractions/ubuntu-helpers:47:  # Allow exec of anything, but under this profile. Allow transition
apparmor.d/abstractions/ubuntu-helpers:48:  # to other profiles if they exist.
apparmor.d/abstractions/ubuntu-console-email:10:# in the toplevel profile. Eg:
apparmor.d/abstractions/ubuntu-media-players:6:# in the toplevel profile. Eg:
apparmor.d/abstractions/ubuntu-email:6:# in the toplevel profile. Eg:
apparmor.d/abstractions/apache2-common:12:  signal peer=@{profile_name},
apparmor.d/abstractions/svn-repositories:12:  # it is intended to be included in profiles for svnserve/apache2 and maybe
apparmor.d/abstractions/ubuntu-bittorrent-clients:6:# in the toplevel profile. Eg:
apparmor.d/abstractions/dconf:4:# be specified in a specific application's profile.
apparmor.d/abstractions/private-files:35:  deny @{HOME}/.{,z}profile* mrk,
apparmor.d/abstractions/private-files:36:  audit deny @{HOME}/.{,z}profile* wl,
apparmor.d/abstractions/ubuntu-console-browsers:10:# in the toplevel profile. Eg:
apparmor.d/abstractions/ubuntu-browsers:6:# in the toplevel profile. Eg:
apparmor.d/abstractions/fcitx:2:# Profile abstraction for allowing fcitx to run in enforced environment
apparmor.d/abstractions/launchpad-integration:4:  # Launchpad integration should run in a sanitizing profile
apparmor.d/abstractions/launchpad-integration:6:  profile launchpad_integration {
apparmor.d/abstractions/bash:14:  @{HOME}/.profile                 r,
apparmor.d/abstractions/bash:15:  @{HOME}/.bash_profile            r,
apparmor.d/abstractions/bash:19:  /etc/profile.dos                 r,
apparmor.d/abstractions/bash:20:  /etc/profile                     r,
apparmor.d/abstractions/bash:21:  /etc/profile.d/                  r,
apparmor.d/abstractions/bash:22:  /etc/profile.d/*                 r,
apparmor.d/abstractions/ubuntu-feed-readers:6:# in the toplevel profile. Eg:
apparmor.d/cache/.features:36:change_profile {yes
apparmor.d/tunables/global:12:# All the tunables definitions that should be available to every profile
apparmor.d/usr.lib.telepathy:15:    /custom/etc/dconf_profile r,
apparmor.d/usr.lib.telepathy:84:    ptrace (read) peer=@{profile_name},
apparmor.d/usr.lib.telepathy:87:    /custom/etc/dconf_profile r,
apparmor.d/usr.lib.telepathy:120:    /custom/etc/dconf_profile r,
apparmor.d/usr.lib.telepathy:204:    profile pxgsettings {
apparmor.d/usr.bin.firefox:154:  # Default profile allows downloads to ~/Downloads and uploads from ~/Public
apparmor.d/usr.bin.firefox:196:  # Ideally these would use a child profile. They are all ELF executables
apparmor.d/usr.bin.firefox:204:  profile lsb_release {
apparmor.d/local/README:1:# This directory is intended to contain profile additions and overrides for
apparmor.d/local/README:2:# inclusion by distributed profiles to aid in packaging AppArmor for
apparmor.d/local/README:5:# The shipped profiles in /etc/apparmor.d can still be modified by an
apparmor.d/local/README:6:# administrator and people should modify the shipped profile when making
apparmor.d/local/README:14:# For example, if the shipped /etc/apparmor.d/usr.sbin.smbd profile has:
apparmor.d/local/README:24:# profile using this mechanism.
apparmor.d/usr.bin.ubuntu-core-launcher:47:    # changing profile
apparmor.d/usr.bin.ubuntu-core-launcher:50:    # don't allow changing profile to unconfined or profiles that start with
apparmor.d/usr.bin.ubuntu-core-launcher:52:    change_profile -> [^u/]**,
apparmor.d/usr.bin.ubuntu-core-launcher:53:    change_profile -> u[^n]**,
apparmor.d/usr.bin.ubuntu-core-launcher:54:    change_profile -> un[^c]**,
apparmor.d/usr.bin.ubuntu-core-launcher:55:    change_profile -> unc[^o]**,
apparmor.d/usr.bin.ubuntu-core-launcher:56:    change_profile -> unco[^n]**,
apparmor.d/usr.bin.ubuntu-core-launcher:57:    change_profile -> uncon[^f]**,
apparmor.d/usr.bin.ubuntu-core-launcher:58:    change_profile -> unconf[^i]**,
apparmor.d/usr.bin.ubuntu-core-launcher:59:    change_profile -> unconfi[^n]**,
apparmor.d/usr.bin.ubuntu-core-launcher:60:    change_profile -> unconfin[^e]**,
apparmor.d/usr.bin.ubuntu-core-launcher:61:    change_profile -> unconfine[^d]**,
apparmor.d/usr.bin.ubuntu-core-launcher:62:    change_profile -> unconfined?**,
apparmor.d/usr.bin.ubuntu-core-launcher:64:    change_profile -> {u,un,unc,unco,uncon,unconf,unconfi,unconfin,unconfine},
apparmor.d/usr.bin.ubuntu-core-launcher:67:    # deny change_profile -> {unconfined,/**},
apparmor.d/usr.bin.ubuntu-core-launcher:68:    # change_profile -> **,
apparmor.d/usr.bin.ubuntu-core-launcher:71:    /var/lib/snapd/seccomp/profiles/* r,
bash_completion.d/libreoffice.sh:2:# It is based on /etc/profile.d/complete.bash from SUSE Linux 10.1
presage.xml:70:    <ProfileManager>
presage.xml:73:             Automatically saves configuration to active profile.
presage.xml:76:    </ProfileManager>
presage.xml:96:                  - %USERPROFILE% on Windows
gimp/2.0/gimprc:290:#     (display-profile-from-gdk no)
gimp/2.0/gimprc:297:# How to handle embedded color profiles when opening a file.  Possible values
gimp/2.0/gimprc:300:# (color-profile-policy ask)
gconf/2/path:22:# mandatory path for desktop-profiles
gconf/2/path:35:# default path for desktop-profiles
adduser.conf:22:# files; in other words, files such as a sample .profile that will be
default/useradd:30:# files; in other words, files such as a sample .profile that will be
mailcap:335:application/vnd.iccprofile; /usr/bin/gcm-import %s; test=test -n "$DISPLAY"
profile:1:# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))
profile:20:if [ -d /etc/profile.d ]; then
profile:21:  for i in /etc/profile.d/*.sh; do
profile:30:source ~/.profile 
bluetooth/input.conf:11:# Enable HID protocol handling in userspace input profile
bluetooth/main.conf:28:# DID profile support. The values are separated by ":" and assigner, VID, PID
bluetooth/main.conf:53:# Enables Multi Profile Specification support. This allows to specify if
bluetooth/main.conf:54:# system supports only Multiple Profiles Single Device (MPSD) configuration
bluetooth/main.conf:55:# or both Multiple Profiles Single Device (MPSD) and Multiple Profiles Multiple
bluetooth/main.conf:58:#MultiProfile = off
init.d/apparmor:32:# Description: AppArmor init script. This script loads all AppArmor profiles.
init.d/apparmor:63:		log_action_msg "Insufficient privileges to change profiles."
init.d/apparmor:75:		# "$PROFILES_CACHE_VAR" itself (on Touch flavors
init.d/apparmor:91:	if [ -x /usr/bin/aa-clickhook ] || [ -x /usr/bin/aa-profile-hook ] ; then
init.d/apparmor:95:                force_profile_hook=0
init.d/apparmor:104:                        force_profile_hook=1
init.d/apparmor:109:                if [ -x /usr/bin/aa-profile-hook ] && ([ $force_profile_hook -eq 1 ] || [ $apparmor_was_updated -eq 1 ]) ; then
init.d/apparmor:110:                        aa-profile-hook -f
init.d/apparmor:117:	log_daemon_msg "Recaching AppArmor profiles"
init.d/apparmor:118:	recache_profiles
init.d/apparmor:136:		log_daemon_msg "Starting AppArmor profiles"
init.d/apparmor:139:		load_configured_profiles
init.d/apparmor:144:		log_daemon_msg "Clearing AppArmor profiles cache"
init.d/apparmor:149:All profile caches have been cleared, but no profiles have been unloaded.
init.d/apparmor:150:Unloading profiles will leave already running processes permanently
init.d/apparmor:154:'aa-complain'. To really tear down all profiles, run the init script
init.d/apparmor:165:		log_daemon_msg "Unloading AppArmor profiles"
init.d/apparmor:167:		running_profile_names | while read profile; do
init.d/apparmor:168:			if ! unload_profile "$profile" ; then
init.d/apparmor:183:		log_daemon_msg "Reloading AppArmor profiles"
init.d/apparmor:186:		load_configured_profiles
init.d/apparmor:188:		unload_obsolete_profiles
init.d/apparmor:197:			cat "$AA_SFS"/profiles
skel/.bashrc:109:# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
skel/.profile:1:# ~/.profile: executed by the command interpreter for login shells.
skel/.profile:2:# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
skel/.profile:7:# the default umask is set in /etc/profile; for setting the umask
ImageMagick-6/mime.xml:508:  <mime type="application/x-profile" description="profiler results" priority="100" pattern="gmon.out" />
gdm3/Xsession:21:# This is why we source the profile files below.
gdm3/Xsession:45:# First read /etc/profile and .profile
gdm3/Xsession:46:for file in /etc/profile "$HOME/.profile"; do
gdm3/Xsession:52:# Second read /etc/xprofile and .xprofile for X specific setup
gdm3/Xsession:53:for file in /etc/xprofile "$HOME/.xprofile"; do
