* Emacs org mode学习笔记

2010年10月18日 lertsau 发表评论阅读评论

[org-mo]

  * 1 参考文献
  * 2 用Org Mode做笔记
      + 2.1 想法与配置
      + 2.2 常用的编辑
  * 3 用Org Mode管理个人事务
      + 3.1 关于TODO ITEM的基本知识和操作
      + 3.2 标签
      + 3.3 时间和日期
      + 3.4 我的TODO LIST解决方案

1 参考文献

本文参考并引用了以下的文章的部分内容。

  * Yu Peng的Emacs的Org Mode
  * Emacs org Mode的官方参考文档
   
2 用Org Mode做笔记

2.1 想法与配置

以前一直都用Emacs Wiki Mode记笔记，但wiki mode总有些奇奇怪怪的bug，并且已经不更新了，最近org mode 非常火爆，禁不住想试一下。

对于记笔记，我的打算很简单，一个目录用来装所有的笔记，一个目录用来存放publish成HTML格式的笔记。并且能够自动生成索引文件。这样就可
以在索引文件里直接查找并跳转到所有的笔记里。

Emacs ORG mode的基本配置如下：

^?View Code LISP

1  (setq load-path (cons "~/lib/emacs-lisp/org-7.01h/lisp" load-path))         
2  (setq load-path (cons "~/lib/emacs-lisp/org-7.01h/contrib/lisp" load-path)) 
3                                                                              
4  (require 'org-install)                                                      
5  (require 'org-publish)                                                      
6  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))                    
7  (add-hook 'org-mode-hook 'turn-on-font-lock)                                
8  (add-hook 'org-mode-hook                                                    
9  (lambda () (setq truncate-lines nil)))                                      
10                                                                             
11 (global-set-key "\C-cl" 'org-store-link)                                    
12 (global-set-key "\C-ca" 'org-agenda)                                        
13 (global-set-key "\C-cb" 'org-iswitchb)                                      

上面基本上是从ORG-mode的文档里抄来的,其中包含setq truncate-lines nil的两行代码是为了解决org-mode在编辑中文的时候不会自动折行的问
题。

接下来的配置基本照抄了meteor1113@newsmth的用org代替muse记日记，修改的部分就是我不想让它自动生成index文件，我比较喜欢自己组织。

^?View Code LISP

1  (setq org-publish-project-alist                                                                           
2        '(("note-org"                                                                                       
3           :base-directory "C:/Documents and Settings/caole/My Documents/My Dropbox/emacs/org/org"          
4           :publishing-directory "C:/Documents and Settings/caole/My Documents/My Dropbox/emacs/org/publish"
5           :base-extension "org"                                                                            
6           :recursive t                                                                                     
7           :publishing-function org-publish-org-to-html                                                     
8           :auto-index nil                                                                                  
9           :index-filename "index.org"                                                                      
10          :index-title "index"                                                                             
11          :link-home "index.html"                                                                          
12          :section-numbers nil                                                                             
13          :style "<link rel=\"stylesheet\"                                                                 
14     href=\"./style/emacs.css\"                                                                            
15     type=\"text/css\"/>")                                                                                 
16         ("note-static"                                                                                    
17          :base-directory "C:/Documents and Settings/caole/My Documents/My Dropbox/emacs/org/org"          
18          :publishing-directory "C:/Documents and Settings/caole/My Documents/My Dropbox/emacs/org/publish"
19          :recursive t                                                                                     
20          :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|swf\\|zip\\|gz\\|txt\\|el"             
21          :publishing-function org-publish-attachment)                                                     
22         ("note"                                                                                           
23          :components ("note-org" "note-static")                                                           
24          :author "caole82@gmail.com"                                                                      
25          )))                                                                                              

值得注意的一个地方是，我把org和publish的目录都扔在了我的Dropbox中，这样可以方便的在不同的系统中同步笔记。有些人喜欢用SVN/GIT/CVS
等版本管理工具，也是个不错的办法。但我没有地方搭这些东西的服务器:-(
这样写完了笔记就可以用M-x org-publish 发布了，我把它绑定到了F8-p上。

^?View Code LISP

(global-set-key (kbd "<f8> p") 'org-publish)

为了在org mode中使用auto-complete，我在auto-complete中增加了这样的配置：

^?View Code LISP

1 (setq ac-modes                                                            
2       (append ac-modes '(org-mode objc-mode jde-mode sql-mode             
3                                   change-log-mode text-mode               
4                                   makefile-gmake-mode makefile-bsdmake-mo 
5                                   autoconf-mode makefile-automake-mode))) 

2.2 常用的编辑

  * 结构化编辑
      + 标题
       
        一级标题是一个*，两级标题是两个*，三级标题…… 最多可以建10级标题。注意，这里的*必须在行首。Publish之后会自动生成目录链接。
        在Emacs中S-Tab可以收起所有的目录树，在标题上按Tab可以展开/收起该标题下的所有内容。在标题上按Alt+左右方向键可以减少/增加该
        标题的级别。
      + 枚举和列表
       
        在org mode中还支持枚举(unordered list)，有序的列表(ordered list)和带描述的列表。
       
        枚举可以用’-',’+',或者非行首的’*’ 作为bullets.同时，可以用开头的空格来区分枚举的层次结构。
       
          o 枚举1
          o 枚举2
          o 枚举3
          o 枚举4
           
        有序的列表可以由’1.’或’1)’来组织。这里可以方便的使用Alt+左右方向键调整列表项的级别。M-Ret可以在当前位置插入一个列表项；
        C-Ret可以在文档尾部插入一个列表项或者标题。
       
         1. 第一级
         2. 第二级
           
             1. 第二级第一点
         3. 第三级
           
            带描述的列表效果是这样的：
           
            Elijah Wood
                He plays Frodo
            Sean Austin
                He plays Sam, Frodo’s friend. I still remember
                在文档中是这样的：
               
        - Elijah Wood :: He plays Frodo
        - Sean Austin :: He plays Sam, Frodo’s friend. I still remember
        
        5个或以上的“-”是一个水平分割符。
       
        -------------------------------------------------------------------------------------------------------------------------
      + 脚注
       
        org mode可以为文章添加脚注，脚注有如下两种方式：
       
        blabla[1]
        blablabla[fn:bla]
        
        效果是这样的：
        blabla^1
        blablabla^2
       
        接下来必须顶格写这些脚注的内容了，这样在文档的末尾会自动生成脚注。C-c C-c可以在脚注的标记与内容之间切换。C-c C-x f可以在
        当前位置添加一个脚注。
       
        [1] 12345
        [fn:bla] 67890
        
      + 结构化编辑的常用快捷方式
       
        这里是Structure Editing的默认快捷方式：
       
        +------------------------------------------------------------------+
        |            next/previous heading            |     C-c C-n/p      |
        |---------------------------------------------+--------------------|
        |      next/previous heading, same level      |     C-c C-f/b      |
        |---------------------------------------------+--------------------|
        |      backward to higher level heading       |      C-c C-u       |
        |---------------------------------------------+--------------------|
        |      jump to another place in document      |      C-c C-j       |
        |---------------------------------------------+--------------------|
        |        previous/next plain list item        |     S-UP/DOWN      |
        |---------------------------------------------+--------------------|
        | insert new heading/item at current level    | M-RET              |
        |---------------------------------------------+--------------------|
        | insert new heading after subtree            | C-RET              |
        |---------------------------------------------+--------------------|
        | insert new TODO entry/checkbox item         | M-S-RET            |
        |---------------------------------------------+--------------------|
        | insert TODO entry/ckbx after subtree        | C-S-RET            |
        |---------------------------------------------+--------------------|
        | turn (head)line into item, cycle item type  | C-c -              |
        |---------------------------------------------+--------------------|
        | turn item/line into headline                | C-c *              |
        |---------------------------------------------+--------------------|
        | promote/demote heading                      | M-LEFT/RIGHT       |
        |---------------------------------------------+--------------------|
        | promote/demote current subtree              | M-S-LEFT/RIGHT     |
        |---------------------------------------------+--------------------|
        | move subtree/list item up/down              | M-S-UP/DOWN        |
        |---------------------------------------------+--------------------|
        | sort subtree/region/plain-list              | C-c ^              |
        |---------------------------------------------+--------------------|
        | clone a subtree                             | C-c C-x c          |
        |---------------------------------------------+--------------------|
        | refile subtree                              | C-c C-w            |
        |---------------------------------------------+--------------------|
        | kill/copy subtree                           | C-c C-x C-w/M-w    |
        |---------------------------------------------+--------------------|
        | yank subtree                                | C-c C-x C-y or C-y |
        |---------------------------------------------+--------------------|
        | narrow buffer to subtree / widen            | C-x n s/w          |
        +------------------------------------------------------------------+
  * 富文本编辑
      + 表格
       
        最基本的表格是这样的：
       
        | A | B |
        | C | D |
        
        效果是这样的：
       
        +---------+
        | A  | B  |
        |----+----|
        | C  | D  |
        +---------+
       
        还可以：
       
        #+CAPTION: 表格的标题
        #+LABEL: tbl:table_label1
        | A | B |
        |---+---|
        | C | D |
        
        在这里，CAPTION指定的是表格的标题，LABEL后的tbl用来指定在文档内部引用该表格的标签。
        效果是：
       
        ABCD
        +---------+
        | A  | B  |
        |----+----|
        | C  | D  |
        +---------+
       
        C-c RET可以在光标所在表格内插入一行
       
        这里是表格相关的常用快捷键：
       
        +-----------------------------------------------------------------+
        | convert region to table                       | C-c          |  |
        |-----------------------------------------------+--------------+--|
        | re-align the table without moving the cursor  | C-c C-c      |  |
        |-----------------------------------------------+--------------+--|
        | re-align the table, move to next field        | TAB          |  |
        |-----------------------------------------------+--------------+--|
        | move to previous field                        | S-TAB        |  |
        |-----------------------------------------------+--------------+--|
        | re-align the table, move to next row          | RET          |  |
        |-----------------------------------------------+--------------+--|
        | move to beginning/end of field                | M-a/e        |  |
        |-----------------------------------------------+--------------+--|
        | move the current column left                  | M-LEFT/RIGHT |  |
        |-----------------------------------------------+--------------+--|
        | kill the current column                       | M-S-LEFT     |  |
        |-----------------------------------------------+--------------+--|
        | insert new column to left of cursor position  | M-S-RIGHT    |  |
        |-----------------------------------------------+--------------+--|
        | move the current row up/down                  | M-UP/DOWN    |  |
        |-----------------------------------------------+--------------+--|
        | kill the current row or horizontal line       | M-S-UP       |  |
        |-----------------------------------------------+--------------+--|
        | insert new row above the current row          | M-S-DOWN     |  |
        |-----------------------------------------------+--------------+--|
        | insert hline below (C-u : above) current row  | C-c -        |  |
        |-----------------------------------------------+--------------+--|
        | insert hline and move to line below it        | C-c RET      |  |
        |-----------------------------------------------+--------------+--|
        | sort lines in region                          | C-c ^        |  |
        +-----------------------------------------------------------------+
      + 引用文字或代码
       
        我常用到的引用文字的标签是#+BEGIN_EXAMPLE / #+END_EXAMPLE ，在这之间的文字会保留原有的格式。
        
        对于代码而言，可以用#+BEGIN_SRC SRC_TYPE / #+END_SRC，其中SRC_TYPE用来指定代码的类型，
        如lisp, java, c, c++等。结合HTMLIZE可以让导出的HTML页面里的代码被按照语法着色。
        
        为了保留引文的格式，还可以使用#+BEGIN_VERSE / #+END_VERSE 和#+BEGIN_QUOTE/ #+END_QUOTE. 
        
        将引文居中排版可以使用#+BEGIN_CENTER / #+END_CENTER.
        
      + 引用图片
       
        用如下方法可以直接在文档内显示图片:
       
        #+CAPTION: title for the image
        #+LABEL: fig:tag_for_img
              [[path/to/image.jpg]]
        
        CAPTION用来指定图片的标题，LABEL用来在文档内部引用这张图片。和表格一样，这两部分都不是必须的。
       
      + 插入链接或附件
       
        给文档添加附件非常简单，C-c C-a 然后就着菜单选好了，其中C-c C-a a是添加文件系统中的文件作为附件。
       
        Org mode提供多种链接方式，包括链接到一个文件内部，链接到外部文件，电子邮件等等。
       
          o 链接的格式：
           
            链接主要是两种格式：
           
            [[link][description]] 或者 [[link]]
            
            例如 SINA
           
          o 如何访问链接：
           
            在一个链接上按C-c C-o即可访问，至于调用什么程序访问，取决于链接的内容，emacs和org mode的配置了。
           
          o 链接的类型
           
            如下都是可以支持的常用link类型：
           
            http://www.sina.com         Web
            file:paper/lastdoc.pdf      本地文档，用相对路径表示
            file:/path/to/filename      本地文档，用绝对路径表示
            news:comp.emacs             新闻组
            caole82@gmail.com    邮件地址
            
          o 内部链接 Internal Link
           
            内部链接就类似于HTML的锚点（实际上export成HTML文件后就变成了锚点），可以实现在一个文档内部的跳转。
           
            如下命令定义了一个名为target的跳转目标：
           
            #<<target>>
            
            如下方式可以设置到target的链接：
           
            [[target]] 或 [[target][description]]
            
          o 其他常用链接命令
           
            C-c l 可以在光标所在处创建一个跳转目标点，在需要跳转至该目标的位置输入命令C-c C-l可以建立到目标的链接
           
            当输入C-c C-l命令，光标若处在已经存在的一个链接上的时候，可以编辑改链接。
           
            命令C-c %可以记录当前光标所在位置，当光标移到其他地方后，可以用C-c &跳转回来。这里的位置记录类似一个kill-ring，重复输
            入C-c %可以记录多个位置，重复输入C-c &可以连续跳转到之前记录的对应位置上。
           
3 用Org Mode管理个人事务

3.1 关于TODO ITEM的基本知识和操作

  * 设置TODO项目
   
    所有标题只要以TODO开头，就会变成TODO 项目。例如：
   
    *** TODO 付手机费
    *** TODO 开会
    
  * 更改TODO项目的状态
   
    C-c C-t Rotate the TODO state of the current item among
    ,-> (unmarked) -> TODO -> DONE --.
    '--------------------------------'
    
    C-c C-t是在定义的状态中循环，而C-u C-c C-t可以指定一个状态。
   
    S-Right 和 S-Left也可以在定义的状态中循环。
   
    C-c a t可以显示所有的TODO项目，能从所有agenda file里非DONE状态的TODO项目都显示出来
   
    S-M RET可以在当前项目下插入一个新的TODO 项目（与当前项目同一级别）
   
  * 更改TODO项目的优先级
   
    以下方式可以设置TODO ITEM的优先级：
   
    *** TODO [#A] 付手机费
    
    C-c , 可以设置一个TODO项目的优先级
    S-Up/Down 可以增减一个TODO项目的优先级
   
  * 增加TODO Item的状态
   
    默认情况下，TODO Item只有两种状态，TODO和DONE。我们可以在.emacs中配置Org，以设置更多的中间状态，例如：
    用下面的方法，我们可以增加一个TODO Item的中间状态，这些状态是顺序的，通常是工作流中的不同状态。
   
    ^?View Code LISP
   
    1 (setq org-todo-keywords                                                
    2       '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED"))) 
   
    另一种可能性是，每个TODO Item可能有不同的类型，例如，公司的TODO Item，家里的TODO Item。或者，我们可能把TODO Item分配给不同的
    人，因此我们可以自定义TODO keywords以表示一个TODO Item的不同类型。
   
    ^?View Code LISP
   
    (setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))
   
    有的时候我们可能对不同的TODO Item有不同的状态，例如，交手机费这类简单的事情只有TODO和DONE两种状态，但是对于解决一个程序的bug
    可能有REPORT, BUG, KNOWNCAUSE, FIXED等状态。这样我们需要定义不同的状态子集(subset)：
   
    ^?View Code LISP
   
    1 (setq org-todo-keywords                                    
    2       '((sequence "TODO" "|" "DONE")                       
    3         (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED") 
    4         (sequence "|" "CANCELED")))                        
   
    C-S-Right/Left可以从一个子集跳转到另一个子集，而S-RIGHT/LEFT会在所有状态之间遍历。
   
    我们还可以用快捷键来迅速切换一个TODO Item的状态。
   
    ^?View Code LISP
   
    1 (setq org-todo-keywords                                                
    2       '((sequence "TODO(t)" "|" "DONE(d)")                             
    3         (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)") 
    4         (sequence "|" "CANCELED(c)")))                                 
   
    上面说的都是全局的设置，我们也可以针对一个文件进行设置，如：
   
    #+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
         (这里也可以用 #+SEQ_TODO，和#+TODO效果是一样的）
         对于类型的设置：
    #+TYP_TODO: Fred Sara Lucy Mike | DONE
         对于多个子集的设置：
    #+TODO: TODO | DONE
    #+TODO: REPORT BUG KNOWNCAUSE | FIXED
    #+TODO: | CANCELED
    
  * 进度记录
   
    最基本的就是记录当一个Item被标记为DONE时的时间戳了，另外，在一个Item完成后，可能会想要写点心得或者备注什么的，可以用如下配置
    实现：
   
    ^?View Code LISP
   
    1 (setq org-log-done 'time) 
    2 (setq org-log-done 'note) 
   
    Org Mode还能记录每个状态改变的时间，但恐怕不是所有人都需要这么精细的控制了。
   
  * 把项目拆分成子项目
   
    很简单，高一级的TODO下所有的低级TODO就是它的子项目，在各级TODO的标题的任意位置插入[/] 或者[%]即会根据其子项目的完成情况自动更
    新进度。
   
    如果想要当所有子项目都标记为Done的时候，父项目也被标记为Done，可以在配置中添加如下设置：
   
    ^?View Code LISP
   
    1 (defun org-summary-todo (n-done n-not-done)                              
    2   "Swith entry to DONE when all subentries are done, to TODO otherwise." 
    3   (let (org-log-done org-log-states)   ; turn off logging.               
    4     (org-todo (if (= n-not-done 0) "DONE" "TODO"))))                     
   
    另一种办法是，如果有大量的字项目，则可以使用check box来标记。
   
    每一个item前只要加上一个[ ] 就变成了check box item, 这在TODO List Item里也是一样的。在TODO List里，C-c C-c可以切换check box
    item的选中与未选中的状态。
   
    ** TODO Test [1/3]
    - [X] Only a test
    - [ ] It's another test
    - [ ] Third test
    
    和Check Box Item相关的快捷键：
    C-c C-c 切换Check Box的状态
    M-S-Ret 插入新的check box item.
   
3.2 标签

  * 标签的基本知识
   
    其实标签并不仅限于TODO Item，而是可以用在任何标题上。标签可以由所有字母，数字，[和]@构成，标签必须有一个前导的:并且还必须有一
    个后继的:，比如，看起来是这样的，‘:work:’，多个标签可以用:分开，例如：‘:work:urgent:’。
   
    需要用到的标签可以预先在配置文件里定义，和增加TODO Item的状态的方法一样，唯一的区别是这里用到的变量是org-tag-faces.
   
    Tag是有继承性的，也就是说，假如一级标题的tag有work，则该级标题以下的所有子标题无论是否显式注明，都自动具有work的标签。例如：
   
    * Meeting with sb.               :work:
    ** Summary with sb1.              :boss:notes:
    *** TODO Prepare slides for him  :action:
    
    这里，Summary with sb1的标签就是work, boss, notes，最后一项的标签就是work, boss, notes, action.
   
  * 设置标签
   
    首先当然可以手动在标题后设置标签，键入:后，M-Tab自动提供标签的补齐。
   
    也可以用命令插入标签：
   
    C-c C-q 为当前标题插入标签
    C-c C-c 当光标在某标题栏时，为该标题插入标签（此时和C-c C-q功能一样）
   
    默认情况下，org会动态维护一个Tag列表，即当前输入的标签若不在列表中，则自动加入列表以供下次补齐使用。
   
    另一种方式是在配置文件中配置变量org-tag-alist全局性地预设一些tag，然后在org文件中设置：
   
    #+TAGS: @work @home @tennisclub
    #+TAGS: laptop car pc sailboat
    
    这样，在该文件中只能使用个以上定义的7个标签。
   
    如果想既使用预设的标签，又动态增加，则必须在文件中增加一个空的TAGS option.
   
    #+TAGS:
    
    在org中我们还可以给tag定义快捷键。对于全局的定义可以写在配置文件中：
   
    ^?View Code LISP
   
    1 (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l))) 
   
    这样要标记@work，@home，laptop就只需要按w, h, l键即可。如果不是全局的定义，即指针对一个文件有效，我们可以在文件中定义，其中，
    \n表示换行，等效于分开写在两个TAGS里。
   
    #+TAGS: @work(w) @home(h) @tennisclub(t) \n laptop(l) pc(p)
    
    假如我们要让@work, @home, @tennisclub变成互斥的，则可以定义：
   
    #+TAGS: { @work(w) @home(h) @tennisclub(t) } laptop(l) pc(p)
    
    这也可以在配置文件中定义，但需要用dummy tag :startgroup和:endgroup包围起来。
   
    ^?View Code LISP
   
    1 (setq org-tag-alist '((:startgroup . nil)           
    2                       ("@work" . ?w) ("@home" . ?h) 
    3                       ("@tennisclub" . ?t)          
    4                       (:endgroup . nil)             
    5                       ("laptop" . ?l) ("pc" . ?p))) 
   
    C-c \ 可以用来查找某个tag下的所有项目
    C-c / m 建立符合某tag的sparse tree
    C-c a m 从所有agenda file里建立符合某tag的全局性列表
    C-c a M 同上，但只检查TODO item或org-tags-match-list-sublevels里指定要检查的项目。
   
3.3 时间和日期

在TODO Item上我们通常还需要标记时间和日期，这里就包含了：

  * 普通的时间和日期，比如该TODO ITEM的开始时间，例如下午三点开会等。
   
    <2010-09-18 Sat 15:00>
    
  * 每天，每周，每月，每年都重复的时间和日期，比如每周去一次健身房之类的。
   
    * pick up Sam at school <2007-05-16 Wed 12:30 +1w>
    
  * 表示一段时间
   
    * 在上海开会 <2004-08-23 Mon>--<2004-08-26 Thu>
    
  * 仅仅表示一段时间而已，不需要在其他模式中引用。（Inactive Timestamp）
   
    * 今天吃饭吃到苍蝇了 [2010-09-28 Tue]
    
C-c > 打开Emacs Calendar
C-c < 把Emacs Calendar光标所在的日期插入到org mode光标所在处。
C-c C-y 当光标放在time range上时，计算两个timestamp之间的天数。
C-c ! 用来添加一个inactive 的timestamp.

在我的配置文件中，我把C-c t 定义给了“插入一个timestamp”。

对于TODO item，我们常常需要指定什么时候开始这项工作，什么时候是截止日期，在org中分别是SCHEDULED 和DEADLINE.

 *** TODO write article about the Earth for the Guide
 The editor in charge is [[bbdb:Ford Prefect]]
 DEADLINE: <2004-02-29 Sun>

 *** TODO Call Trillian for a date on New Years Eve.
 SCHEDULED: <2004-12-25 Sat>

C-c C-d 插入一个Deadline
C-c C-s 插入一个Schedule
C-c / d 建立一个包含所有deadline的TODO项目的sparse tree
C-c / b 建立一个包含deadline在指定日期前的TODO项目的sparse tree
C-c / a 建立一个包含deadline在指定日期后的TODO项目的sparse tree

3.4 我的TODO LIST解决方案

我的TODO List方案基本上是在常规的待办事项上加上一些的GTD思想。

作为一个IT民工，我的生活比较简单，我不在家就在公司，两者都不在就基本在路上。因此我的TODO 项目的地点基本就是这三项。另外，有些项目
需要用到电脑，有些不需要，有些都可以（比如看某本既有电子版又有纸版的书）。

下面列出了我用到的标签，TODO Item的中间状态很简单，就是TODO：未开始；INPROGRESS：进行中；和DONE：已完成。根据GTD的思想，有些TODO
Item是2分钟内即可完成的，我把它们标记为immediately，立刻完成。wait是需要等待其他人或其他资源的；action是随时可以开始做的项目。

#+TODO: TODO INPROGRESS | DONE
#+TAGS: @office(o) @home(h) @traffic(t)
#+TAGS: computer(c) nocomputer(n) either(e)
#+TAGS: immediately(i) wait(w) action(a)

根据简化的GTD思想，TODO的项目分为Idea List; Task List; Project List; Someday/Maybe List; Reminder这五项。Reminder这一项和前四个关
系不大，我用来记录一些备忘录，诸如下周末前要还房贷，某月某日是结婚纪念日之类的。这类提醒很多人喜欢记在Agenda里头，或者日历里。我
更愿意直接写成条目放在Reminder里，每天看一下，这主要是因为我需要记住的事情不算太多，不需要用到Agenda。

每天抽两个时间做一下所谓的Mind Sweep，把所有想到可能要做的事情都扔进Idea List里头。每天抽一个时间整理一下Idea List，把不可能实现
的直接删掉，把将来可能会做的，但现在肯定不做的扔到Someday/Maybe List中。Task List用于放一步即可完成的项目，Project List用于放比较
复杂的项目，可能需要细分为许多个TODO Item，或者可能需要合作才能完成。

 * Idea List:
 * Task List:
 * Project List:
 * Someday/Maybe List:
 * Reminder:

这样，举个例子，每天到公司或者到家开始工作的时候，首先要做的是三步：

  * 按照GTD的说法是清空大脑，把脑子里的所有想法都列出来，然后放到Idea List。
  * 用C-c \ 查询标签为@office或者@home 的未完成项目
  * 浏览一下Reminder 里有没有和今天相关的事情。
   
然后，在每天结束工作的时候清理一下 Idea List。

ORG Mode我主要的用处就是拿来记笔记和做Todo List，似乎它还有很多其他功能，等我需要的时候再去研究吧。


* Emacs的Org Mode

2010年4月1日 ahei 发表评论阅读评论

作者: yupeng

[org-mo]

1 介绍
2 基本用法
3 列表
4 注脚
5 表格
5.1 基本表格
5.2 spreadsheet
6 链接
7 todo list
8 导出成其他格式
9 请参考 org mode 的文档。
10 我自己的使用经验

1 介绍
~~~~~~~
Org mode 是 emacs 中的一个主模式。 Org 是 organization 的缩写。这个模式的主要作用是用来记笔记，写 todo list，org mode 有一个目标
，就是希望每件事情都只记录一次。 Org mode 已经是 emacs 自带的组件，如果你想用最新的 org mode，可以在这里下载：[http://orgmode.org
/]

2 基本用法
~~~~~~~~~~~
很简单，一级标题用一个星号（*）表示，二级标题用两个星号表示，三级标题用三个星号表示，以此类推，注意，星号必须顶格写。比如，新建一
个文件，在 emacs 中打开，然后敲：M-x org-mode，进入 org mode。然后，在文件中写入下面的内容：
 * top level
 ** the second level
 *** the third level
somethings to write
注意，星号前不能有空格。
然后你就可以看到这些各个等级的标题和内容被合适的高亮了。你可以自由的控制这些标题和内容是被折叠还是显示出来，方法就是使用TAB。比如
，把光标移动到最开始的地方，连续按TAB, org mode 会把 buffer 中的内容按照全部折叠->展开所有标题->展开全部内容这样的顺序循环显示。
另外，还有一些快捷键可以帮助你方便的在 org mode 中间移动:
C-c C-n 移动到下一个标题
C-c C-p 移动到上一个标题
C-c C-f 移动到和当前标题同等级的下一个标题
C-c C-b 移动到和当前标题同等级的上一个标题
C-c C-u 向上移动到更高一层的标题

3 列表
~~~~~~~
在同一个子标题下，你还可以将内容划分的更细致。方法是使用这些符号： ‘-’， ‘+’， ‘*’， ‘1.’， ‘1)’。注意，这里的’*'不能顶格写。比如
，在你的 org mode 的 buffer 中写入下面这些文字（从 org mode 手册上抄来的例子）：
My favorite scenes are (in this order)
1. The attack of the Rohirrim
2. Eowyn’s fight with the witch king
 * this was already my favorite scene in the book
 * I really like Miranda Otto.
3. Peter Jackson being shot by Legolas
– on DVD only
He makes a really funny face when it happens.
But in the end, no individual scenes matter but the film as a whole.
Important actors in this film are:
– Elijah Wood :: He plays Frodo
– Sean Austin :: He plays Sam, Frodo’s friend. I still remember
him very well from his role as Mikey Walsh in the Goonies.

把光标移动到 ‘1.’ ‘2.’ 或 ‘3.’ 所在的行上，然后按 shift 加左右方向键，看看有什么效果。

4 注脚
~~~~~~~
在 org mode 中，你可以为你的文章添加注脚（footnote）。注脚的格式有两种，一是方括号+数字，二是方括号+fn+名字。比如下面有两个例子：
在 org mode 的正文中写下这两句话：

The Org homepage[1] now looks a lot better than it used to.
The Org homepage[fn:orghome] now looks a lot better than it used to.

接下俩你可以写一些其他东西，然后在文章的末尾写上下面两句话（注意：必须要顶格写）：

[1] The link is: http://orgmode.org
[fn:orghome] The link is: http://orgmode.org

把光标移动到正文的[1]处，按 C-c C-c，可以跳转到注脚[1]处，在注脚[1]处按 C-c C-c，可以跳转到正文的[1]处。对于[2]也一样。

5 表格
~~~~~~~

5.1 基本表格
=============
在 org mode 中，你可以画表格。方法很简单，在某一行顶格的位置输入’|'，然后输入表格第一行第一列的内容，再输入’|'，然后输入表格的的
一行第二列的内容，以此类推。当第一行输入完成后，按 TAB， org mode 会把当前行对齐，然后为你创造出表格的下一行，让你继续输入。用
TAB 和 S+TAB可以在表格中正向或反向的移动。
比如下面的例子：

| 1 | one |
| 2 | two |
| 3 | This is a long chunk of text |
| 4 | four |

有时候，表格的某一项特别的长，你可以在任意一个表格的空白项内输入数字来限制其所在列的长度。比如：

| | <6> |
| 1 | one |
| 2 | two |
| 3 | This=> |
| 4 | four |

在上面的例子中，第二列的长度不会超过6，超过的部分会被隐藏起来。你可以把鼠标移动到’This=>’上面，会有浮动标签显示出该项的内容，或者
输入’C-c `’可以编辑被隐藏的内容。如果你发现表格的某一项没有如你预期的那样被隐藏起来，你可以在表格中的任意位置按 ‘C-c C-c’。

我们还可以把表格弄的更好看一些。在表格的某两行之间加入’|-’，然后按TAB，可以作出下面的效果：

| | <6> |
|—+——–|
| 1 | one |
| 2 | two |
| 3 | This=> |
| 4 | four |

5.2 spreadsheet
================
你可以在表格中增加计算的功能。比如你有这样一个表格：第一列和第二列是三角形两个直角边的长度，第三列是通过勾股定理计算出的斜边长度
，或者是这样一张表格：前几列是你各个科目的考试成绩，最后一列是你的平均分，那么，org mode 可以自动为你完成计算。我们以计算勾股定理
为例，创建一张表格：

| a | b | |
|—+—+—|
| 3 | 4 | |
| 6 | 8 | |
| 1 | 2 | |

在第二行第三列中输入’=($1^2+$2^2)^0.5′。$1和$2表示第一列和第二列，在你自己的表格中，你会使用你希望的列数进行计算。

| a | b | |
|—+—+———–|
| 3 | 4 | 5. |
| 6 | 8 | 10. |
| 1 | 2 | 2.2360680 |
#+TBLFM: $3=($1^2+$2^2)^0.5

有时候，你输入完成后，org mode不会自动帮你对所有项都计算一边，这时，你可以输入’C-u C-c C-c’强制org mode为整个表格进行计算。如果你
不想让某一列都按照公式计算，只希望在某一特定项上进行计算，你可以这样输入：’:=($1^2+$2^2)^0.5′, 即在等号前再加一个冒号。

6 链接
~~~~~~~
你可以在 org mode 中设置连接。比如链接到当前文档的某个位置，或者链接到一个外部文件。链接到当前文档的某个位置只需这样输入：
[[link][description]]
description 是你希望链接到的内容，org mode 会通过字符串搜索的方式找到第一个与 description 匹配的地方作为链接的目标。要链接到一个
外部文件，只需这样输入：
[[file:/directory/filename]]
想要跳到链接处，可以使用快捷键’C-c C-o’，或者鼠标左键单击。对于到外部文件的链接，emacs 会试图将该文件打开。

7 todo list
~~~~~~~~~~~~
Org mode 的一个很重要的功能就是写 todo list。创建一个todo list 和创建一个 org mode 的其他标题并没有什么区别。比如你可以顶格写下这
样一
行：
 * write org mode document
然后把光标移动到这行上，按shift+左右方向键，你会发现该条目会在 TODO和 DONE 之间切换：
 * TODO write org mode document
 * DONE write org mode document

这就是最简单的 todo list 了，想做什么，就在 org mode 下创建一个条目，并将其状态设置为 TODO，做完后将其状态设置为 DONE。

todo list 默认只有两种状态： TODO 和 DONE。我们可以再增加一些其他状态。比如在.emacs中加入下面的语句:

^?View Code LISP

1 (setq org-todo-keywords                                          
2       '((sequence "TODO" "DOING" "HANGUP" "|" "DONE" "CANCEL"))) 

可以将 todo list 的状态增加为五种：TODO，DOING，HANGUP，DONE，CANCEL。
注意，在 HANGUP 和 DONE 之间有一条竖线 “|”，在竖线之前的状态和之后的状态使用的是不同的face。

进一步的，我们还可以记录切换到某一种状态时的时间：

^?View Code LISP

1 (setq org-todo-keywords                                                            
2       '((sequence "TODO(t)" "DOING(i!)" "HANGUP(h!)" "|" "DONE(d!)" "CANCEL(c!)")))

在 DOING HANGUP DONE 和 CANCEL 后的括号中都有一个’!'，这种写法表示进入到这些状态后会记录下当前时间。而每个状态后面的括号中都有一
个字母，这个字母就是进入该状态的快捷键。当你想切换到某一状态时，可以输入’C-c C-t’（此时 emacs 会弹出一个提示窗口），然后输入对应
的快捷键就可以把当前的条目设置为该状态。

主意，改变 org-todo-keywrods 之后，最好把你的 org mode 的文件关闭，然后在重新打开，否则可能会发现设置无效。

8 导出成其他格式
~~~~~~~~~~~~~~~~~
已经编辑好的 org mode 文档可以导出为其他格式。
C-c C-e a 导出为文本文件。
C-c C-e h 导出为 HTML 文件。

9 请参考 org mode 的文档。
~~~~~~~~~~~~~~~~~~~~~~~~~~~
实际上 org mode 提供的功能极其繁多。我在上面列出的只是我日常会用到的功能。 Org mode 还有很多我这篇文章中完全没有涉及的功能，而我
涉及到的功能，也有许多细微的技巧没有提及。幸运的是， org mode 有一份极其详尽的文档。你可以在 emacs 中输入 ‘C-h i’，然后搜索 ‘org
mode’，找到该文档。想充分发挥出 org mode 的威力，需要仔细阅读这份文档。

10 我自己的使用经验
~~~~~~~~~~~~~~~~~~~~
1. 记 todo list。
把我工作中要做的事情和自己想学的东西都列出来，并且使用前面提到的功能记录下每件事情的起始时间和结束时间，即 DOING 和DONE 的时间，
以此推算出这件事情究竟花费多少时间。我是搞 IT 行业的，经常会遇到任务完不成，需要加班的情况。我希望通过记录下我完成每件事情的时间
，来得到一份第一手资料，用来推断以后遇到的工作所花费的时间。这样，无论是boss 给我安排任务，还是我给别人安排任务，都可以做到心中有
数。
2. 记笔记。
工作中，领导有要求记工作笔记，把工作中遇到的问题和解决办法记录下来。平常在网上查到的资料，也可以随手建立一个条目，粘贴上去。
3. 写文档。
我个人认为 org mode 不适合写很长，很复杂，逻辑性很强的文档，那是tex 的范畴。不过相对简单的文档，比如工作报告，用 org mode 写，再
生成文本文档，效果还是不错的。

实际上，本文基本涵盖了我所用到的 org mode 的功能。我曾经通读过 org mode 的文档。开始我读的很兴奋，因为看到了很多让我眼花缭乱的功
能。但后来我就感到困惑了，因为那么多功能，如果我都用上的话，反而会把事情变得很繁琐。最后，我选择了一些最基本最简单的功能，用来辅
助我的日常工作（也就是我本文中介绍到的功能）。但我总是想，那些我没用到的功能，也许只是我没有好的思路来使用而已。所以，如果有谁有
好的 org mode 的使用思路，请一定要不吝赐教。

最后，我习惯让扩展名为.org的文件打开后默认进入 org mode，只需在.emacs 中加入：(emacs 23已默认可以，不需要加)

^?View Code LISP

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

