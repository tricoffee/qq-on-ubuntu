* dd命令详解

    2011-07-14 13:27:54     我来说两句      
    收藏    [dl]    我要投稿

    一、dd命令的解释。
    dd：用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。
    注意：指定数字的地方若以下列字符结尾则乘以相应的数字：b=512；c=1；k=1024；w=2
    参数：
    1. if=文件名：输入文件名，缺省为标准输入。即指定源文件。< if=input file >
    2. of=文件名：输出文件名，缺省为标准输出。即指定目的文件。< of=output file >
    3. ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。
        obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。
        bs=bytes：同时设置读入/输出的块大小为bytes个字节。
    4. cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。
    5. skip=blocks：从输入文件开头跳过blocks个块后再开始复制。
    6. seek=blocks：从输出文件开头跳过blocks个块后再开始复制。
    注意：通常只用当输出文件是磁盘或磁带时才有效，即备份到磁盘或磁带时才有效。
    7. count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。
    8. conv=conversion：用指定的参数转换文件。
        ascii：转换ebcdic为ascii
         ebcdic：转换ascii为ebcdic
        ibm：转换ascii为alternate ebcdic
        block：把每一行转换为长度为cbs，不足部分用空格填充
        unblock：使每一行的长度都为cbs，不足部分用空格填充
        lcase：把大写字符转换为小写字符
        ucase：把小写字符转换为大写字符
        swab：交换输入的每对字节
         noerror：出错时不停止
         notrunc：不截短输出文件
        sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。
    二、dd应用实例。
    1.将本地的/dev/hdb整盘备份到/dev/hdd
       dd if=/dev/hdb of=/dev/hdd
    2.将/dev/hdb全盘数据备份到指定路径的image文件
       dd if=/dev/hdb of=/root/image
    3.将备份文件恢复到指定盘
       dd if=/root/image of=/dev/hdb
    4.备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径
        dd if=/dev/hdb | gzip > /root/image.gz
    5.将压缩的备份文件恢复到指定盘
       gzip -dc /root/image.gz | dd of=/dev/hdb
    6.备份磁盘开始的512个字节大小的MBR信息到指定文件
       dd if=/dev/hda of=/root/image count=1 bs=512
       count=1指仅拷贝一个块；bs=512指块大小为512个字节。
       恢复：dd if=/root/image of=/dev/hda
    7.备份软盘
       dd if=/dev/fd0 of=disk.img count=1 bs=1440k (即块大小为1.44M)
    8.拷贝内存内容到硬盘
       dd if=/dev/mem of=/root/mem.bin bs=1024 (指定块大小为1k) 
    9.拷贝光盘内容到指定文件夹，并保存为cd.iso文件
       dd if=/dev/cdrom(hdc) of=/root/cd.iso
    10.增加swap分区文件大小
    第一步：创建一个大小为256M的文件：
    dd if=/dev/zero of=/swapfile bs=1024 count=262144
    第二步：把这个文件变成swap文件：
    mkswap /swapfile
    第三步：启用这个swap文件：
    swapon /swapfile
    第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件：
    /swapfile    swap    swap    default   0 0
    11.销毁磁盘数据
         dd if=/dev/urandom of=/dev/hda1
    注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。
    12.测试硬盘的读写速度
         dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
          dd if=/root/1Gb.file bs=64k | dd of=/dev/null
    通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。
    13.确定硬盘的最佳块大小：
         dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
         dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file
         dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file
         dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file
    通过比较以上命令输出中所显示的命令执行时间，即可确定系统最佳的块大小。
    14.修复硬盘：
         dd if=/dev/sda of=/dev/sda 或dd if=/dev/hda of=/dev/hda
    当硬盘较长时间(一年以上)放置不使用后，磁盘上会产生magnetic flux point，当磁头读到这些区域时会遇到困难，并可能导致I/O错误。当
    这种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数据起死回生。并且这个过程是安全、高效的。

    /dev/null和/dev/zero的区别
     
    /dev/null，外号叫无底洞，你可以向它输出任何数据，它通吃，并且不会撑着！
    /dev/zero,是一个输入设备，你可你用它来初始化文件。
     
    /dev/null，外号叫无底洞，你可以向它输出任何数据，它通吃，并且不会撑着！
    /dev/zero,是一个输入设备，你可你用它来初始化文件。
     
    /dev/null------它是空设备，也称为位桶（bit bucket）。任何写入它的输出都会被抛弃。如果不想让消息以标准输出显示或写入文件，那
    么可以将消息重定向到位桶。
    /dev/zero------该设备无穷尽地提供0，可以使用任何你需要的数目——设备提供的要多的多。他可以用于向设备或文件写入字符串0。
    oracle@localhost oracle]$if=/dev/zero of=./test.txt bs=1k count=1
    oracle@localhost oracle]$ ls -l
    total 4
    -rw-r--r--    1 oracle   dba          1024 Jul 15 16:56 test.txt
     
    eg,
   
        find / -name access_log  2>/dev/null

    使用/dev/null
    把/dev/null看作"黑洞". 它非常等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到. 然而, /
    dev/null对命令行和脚本都非常的有用.
    禁止标准输出.    1 cat $filename >/dev/null
       2 # 文件内容丢失，而不会输出到标准输出.

    禁止标准错误 (来自例子 12-3).    1 rm $badname 2>/dev/null
       2 #           这样错误信息[标准错误]就被丢到太平洋去了.

    禁止标准输出和标准错误的输出.    1 cat $filename 2>/dev/null >/dev/null
       2 # 如果"$filename"不存在，将不会有任何错误信息提示.
       3 # 如果"$filename"存在, 文件的内容不会打印到标准输出.
       4 # 因此Therefore, 上面的代码根本不会输出任何信息.
       5 #
       6 #  当只想测试命令的退出码而不想有任何输出时非常有用。
       7 #
       8 #
       9 # cat $filename &>/dev/null
      10 #     也可以, 由 Baris Cicek 指出.

    Deleting contents of a file, but preserving the file itself, with all attendant permissions (from Example 2-1 and Example
    2-3):    1 cat /dev/null > /var/log/messages
       2 #  : > /var/log/messages   有同样的效果, 但不会产生新的进程.（因为:是内建的）
       3
       4 cat /dev/null > /var/log/wtmp

    自动清空日志文件的内容 (特别适合处理这些由商业Web站点发送的讨厌的"cookies"):
   
    --------------------------------------------------------------------------------
    例子 28-1. 隐藏cookie而不再使用
       1 if [ -f ~/.netscape/cookies ]  # 如果存在则删除.
       2 then
       3   rm -f ~/.netscape/cookies
       4 fi
       5
       6 ln -s /dev/null ~/.netscape/cookies
       7 # 现在所有的cookies都会丢入黑洞而不会保存在磁盘上了.
     
    --------------------------------------------------------------------------------
    使用/dev/zero
    像/dev/null一样, /dev/zero也是一个伪文件, 但它实际上产生连续不断的null的流（二进制的零流，而不是ASCII型的）. 写入它的输出会
    丢失不见, 而从/dev/zero读出一连串的null也比较困难, 虽然这也能通过od或一个十六进制编辑器来做到. /dev/zero主要的用处是用来创建
    一个指定长度用于初始化的空文件，就像临时交换文件.
   
    --------------------------------------------------------------------------------
    例子 28-2. 用/dev/zero创建一个交换临时文件
       1 #!/bin/bash
       2 # 创建一个交换文件.
       3
       4 ROOT_UID=0         # Root 用户的 $UID 是 0.
       5 E_WRONG_USER=65    # 不是 root?
       6
       7 FILE=/swap
       8 BLOCKSIZE=1024
       9 MINBLOCKS=40
      10 SUCCESS=0
      11
      12
      13 # 这个脚本必须用root来运行.
      14 if [ "$UID" -ne "$ROOT_UID" ]
      15 then
      16   echo; echo "You must be root to run this script."; echo
      17   exit $E_WRONG_USER
      18 fi 
      19  
      20
      21 blocks=${1:-$MINBLOCKS}          #  如果命令行没有指定，
      22                                  #+ 则设置为默认的40块.
      23 # 上面这句等同如：
      24 # --------------------------------------------------
      25 # if [ -n "$1" ]
      26 # then
      27 #   blocks=$1
      28 # else
      29 #   blocks=$MINBLOCKS
      30 # fi
      31 # --------------------------------------------------
      32
      33
      34 if [ "$blocks" -lt $MINBLOCKS ]
      35 then
      36   blocks=$MINBLOCKS              # 最少要有 40 个块长.
      37 fi 
      38
      39
      40 echo "Creating swap file of size $blocks blocks (KB)."
      41 dd if=/dev/zero of=$FILE bs=$BLOCKSIZE count=$blocks  # 把零写入文件.
      42
      43 mkswap $FILE $blocks             # 将此文件建为交换文件（或称交换分区）.
      44 swapon $FILE                     # 激活交换文件.
      45
      46 echo "Swap file created and activated."
      47
      48 exit $SUCCESS
     
    --------------------------------------------------------------------------------
    关于 /dev/zero 的另一个应用是为特定的目的而用零去填充一个指定大小的文件, 如挂载一个文件系统到环回设备（loopback device） (参
    考例子 13-8) 或"安全地" 删除一个文件(参考例子 12-55).
   
    --------------------------------------------------------------------------------
    例子 28-3. 创建ramdisk
       1 #!/bin/bash
       2 # ramdisk.sh
       3
       4 #  "ramdisk"是系统RAM内存的一段，
       5 #+ 它可以被当成是一个文件系统来操作.
       6 #  它的优点是存取速度非常快 (包括读和写).
       7 #  缺点: 易失性, 当计算机重启或关机时会丢失数据.
       8 #+       会减少系统可用的RAM.
       9 #
      10 #  那么ramdisk有什么作用呢?
      11 #  保存一个较大的数据集在ramdisk, 比如一张表或字典,
      12 #+ 这样可以加速数据查询, 因为在内存里查找比在磁盘里查找快得多.
      13
      14
      15 E_NON_ROOT_USER=70             # 必须用root来运行.
      16 ROOTUSER_NAME=root
      17
      18 MOUNTPT=/mnt/ramdisk
      19 SIZE=2000                      # 2K 个块 (可以合适的做修改)
      20 BLOCKSIZE=1024                 # 每块有1K (1024 byte) 的大小
      21 DEVICE=/dev/ram0               # 第一个 ram 设备
      22
      23 username=`id -nu`
      24 if [ "$username" != "$ROOTUSER_NAME" ]
      25 then
      26   echo "Must be root to run /"`basename $0`/"."
      27   exit $E_NON_ROOT_USER
      28 fi
      29
      30 if [ ! -d "$MOUNTPT" ]         #  测试挂载点是否已经存在了,
      31 then                           #+ 如果这个脚本已经运行了好几次了就不会再建这个目录了
      32   mkdir $MOUNTPT               #+ 因为前面已经建立了.
      33 fi
      34
      35 dd if=/dev/zero of=$DEVICE count=$SIZE bs=$BLOCKSIZE  # 把RAM设备的内容用零填充.
      36                                                       # 为何需要这么做?
      37 mke2fs $DEVICE                 # 在RAM设备上创建一个ext2文件系统.
      38 mount $DEVICE $MOUNTPT         # 挂载设备.
      39 chmod 777 $MOUNTPT             # 使普通用户也可以存取这个ramdisk.
      40                                # 但是, 只能由root来缷载它.
      41
      42 echo "/"$MOUNTPT/" now available for use."
      43 # 现在 ramdisk 即使普通用户也可以用来存取文件了.
      44
      45 #  注意, ramdisk是易失的, 所以当计算机系统重启或关机时ramdisk里的内容会消失.
      46 #
      47 #  拷贝所有你想保存文件到一个常规的磁盘目录下.
      48
      49 # 重启之后, 运行这个脚本再次建立起一个 ramdisk.
      50 # 仅重新加载 /mnt/ramdisk 而没有其他的步骤将不会正确工作.
      51
      52 #  如果加以改进, 这个脚本可以放在 /etc/rc.d/rc.local,
      53 #+ 以使系统启动时能自动设立一个ramdisk.
      54 #  这样很合适速度要求高的数据库服务器.
      55
      56 exit 0

    这样，一些诸如一些错误信息就不会显示出来。
   
* linux命令dd
分类： linux命令 2011-08-09 15:09 2114人阅读评论(1) 收藏举报

dd

使用dd这个linux命令可以创建一定大小文件。

linux创建文件命令：dd命令
把指定的输入文件拷贝到指定的输出文件中，并且在拷贝的过程中可以进行格式转换。语法：
CODE:[Copy to clipboard]dd 〔选项〕
QUOTE:
if =输入文件(或设备名称)。
of =输出文件(或设备名称)。
ibs = bytes 一次读取bytes字节，即读入缓冲区的字节数。
skip = blocks 跳过读入缓冲区开头的ibs*blocks块。
obs = bytes 一次写入bytes字节，即写入缓冲区的字节数。
bs = bytes 同时设置读/写缓冲区的字节数(等于设置obs和obs)。
cbs = bytes 一次转换bytes字节。
count = blocks 只拷贝输入的blocks块。
conv = ASCII 把EBCDIC码转换为ASCII码。
conv = ebcdic 把ASCII码转换为EBCDIC码。
conv = ibm 把ASCII码转换为alternate EBCDIC码。
conv = blick 把变动位转换成固定字符。
conv = ublock 把固定们转换成变动位
conv = ucase 把字母由小写变为大写。
conv = lcase 把字母由大写变为小写。
conv = notrunc 不截短输出文件。
conv = swab 交换每一对输入字节。
conv = noerror 出错时不停止处理。
conv = sync 把每个输入记录的大小都调到ibs的大小(用ibs填充)。
fdformat命令
低级格式化软盘。
实例:
创建一个100M的空文件
dd if=/dev/zero of=hello.txt bs=100M count=1

以上是linux创建文件命令：dd的用法。

2.实例分析
2.1.数据备份与恢复
2.1.1整盘数据备份与恢复
备份
将本地的/dev/hdx整盘备份到/dev/hdy ：dd if=/dev/hdx of=/dev/hdy
将/dev/hdx全盘数据备份到指定路径的image文件：dd if=/dev/hdx of=/path/to/image
备份/dev/hdx全盘数据，并利用gzip工具进行压缩，保存到指定路径：dd if=/dev/hdx | gzip
>/path/to/image.gz
恢复
将备份文件恢复到指定盘：dd if=/path/to/image of=/dev/hdx
将压缩的备份文件恢复到指定盘：gzip -dc /path/to/image.gz | dd of=/dev/hdx
2.1.2.利用netcat远程备份
在源主机上执行此命令备份/dev/hda：dd if=/dev/hda bs=16065b | netcat < targethost-IP >
1234在目的主机上执行此命令来接收数据并写入/dev/hdc：netcat -l -p 1234 | dd of=/dev/hdc
bs=16065b
以下两条指令是目的主机指令的变化分别采用bzip2 gzip对数据进行压缩，并将备份文件保存在当
前目录：
netcat -l -p 1234 | bzip2 > partition.img
netcat -l -p 1234 | gzip > partition.img
2.1.3.备份MBR
备份：
备份磁盘开始的512Byte大小的MBR信息到指定文件：dd if=/dev/hdx of=/path/to/image
count=1 bs=512
恢复：
将备份的MBR信息写到磁盘开始部分：dd if=/path/to/image of=/dev/hdx
2.1.4.备份软盘
将软驱数据备份到当前目录的disk.img文件：dd if=/dev/fd0 of=disk.img count=1 bs=1440k
2.1.5.拷贝内存资料到硬盘
将内存里的数据拷贝到root目录下的mem.bin文件：dd if=/dev/mem of=/root/mem.bin
bs=1024
2.1.6.从光盘拷贝iso镜像
拷贝光盘数据到root文件夹下，并保存为cd.iso文件：dd if=/dev/cdrom of=/root/cd.iso
2.2.增加Swap分区文件大小
创建一个足够大的文件（此处为256M）：dd if=/dev/zero of=/swapfile bs=1024 count=262144
把这个文件变成swap文件：mkswap /swapfile
启用这个swap文件：swapon /swapfile
在每次开机的时候自动加载swap文件, 需要在 /etc/fstab 文件中增加一行：/swapfile swap
swap defaults 0 0
2.3.销毁磁盘数据
利用随机的数据填充硬盘：dd if=/dev/urandom of=/dev/hda1
在某些必要的场合可以用来销毁数据。执行此操作以后，/dev/hda1将无法挂载，创建和拷贝操作
无法执行。
2.4磁盘管理
2.4.1.得到最恰当的block size
通过比较dd指令输出中所显示的命令执行时间，即可确定系统最佳的block size大小：
dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.filedd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file
dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file
dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file
2.4.2测试硬盘读写速度
通过两个命令输出的执行时间，可以计算出测试硬盘的读／写速度：
dd if=/root/1Gb.file bs=64k | dd of=/dev/null
hdd if=/dev/zero of=/root/1Gb.file bs=1024 count=1000000
2.4.3.修复硬盘
当硬盘较长时间（比如一两年年）放置不使用后，磁盘上会产生magnetic flux point。当磁头读到
这些区域时会遇到困难，并可能导致I/O错误。当这种情况影响到硬盘的第一个扇区时，可能导致
硬盘报废。下面的命令有可能使这些数据起死回生。且这个过程是安全，高效的。
dd if=/dev/sda of=/dev/sda

http://hi.baidu.com/iruler/blog/item/1e644a2d652c9636349bf723.html

DD命令使用总结

dd

1.作用

dd命令用来复制文件，并根据参数将数据转换和格式化。

2.格式

dd [options]

3.[opitions]主要参数

bs=字节：强迫 ibs=<字节>及obs=<字节>。

cbs=字节：每次转换指定的<字节>。

conv=关键字：根据以逗号分隔的关键字表示的方式来转换文件。

count=块数目：只复制指定<块数目>的输入数据。

ibs=字节：每次读取指定的<字节>。

if=文件：读取<文件>内容，而非标准输入的数据。

obs=字节：每次写入指定的<字节>。

of=文件：将数据写入<文件>，而不在标准输出显示。

seek=块数目：先略过以obs为单位的指定<块数目>的输出数据。

skip=块数目：先略过以ibs为单位的指定<块数目>的输入数据。

dd命令使用技巧五则 -|jacketzhong 发表于 2006-8-24 9:50:00

dd命令是linux下一个非常有用的磁盘命令。它可以将指定大小的块拷贝成一个文件，

并在拷贝的同时执行指定的转换。由于dd命令允许二进制读写，所以特别适合在原始

物理设备上进行输入/输出操作。下面介绍几则dd命令的使用技巧。

一、为软盘创建镜像文件

使用如下命令创建软盘镜像。

#dd if=/dev/fd0 of=disk.img bs=1440k

使用dd命令制作出的软盘镜像文件能在HD-Copy或winimage下使用。

二、制作优盘启动盘

首先打开linux的安装光盘，将images目录下的diskboot.img文件复制到/root目录下

，然后将优盘挂载到/dev/sdb，然后执行如下命令即可：

#dd if=/root/diskboot.img of=/dev/sdb bs=125682176

优盘需要为引导型并且要分出引导分区。

三、使用windows引导linux

提取引导文件

#dd if=/dev/hdaN of=/bootsect.lnx bs=512 count=1

编辑boot.ini文件

将上面生成的bootsect.lnx文件复制到c:\下，并在boot.ini文件中增加一行：c:\boo

tsect.lnx="Linux"

四、备份还原硬盘主引导记录

1、备份硬盘主引导记录

#dd if=/dev/hda of=/disk.mbr bs=512 count=1

2、还原硬盘主引导记录

#dd if=/disk.mbr of=/dev/hda bs=512 count=1

五、要切割的大文件为DGJD，共98336321字节，则：

dd if=dgjd of=zz1 bs=1 count=20000000

dd if=dgjd of=zz2 bs=1 count=20000000 skip=20000000

dd if=dgjd of=zz3 bs=1 count=20000000 skip=40000000

dd if=dgjd of=zz4 bs=1 count=20000000 skip=60000000

dd if=dgjd of=zz5 bs=1 count=18336321 skip=80000000

其中IF（INPUT FILENAME）是要切割的大文件名，OF（OUTPUT

FILENAME）是切割后的子文件名，BS是指明以多少字节作为一个切割记录单位，COUNT

是要切割的单位记录数，SKIP是说明切割时的起点，单位同样以BS设定值为准。通过

上述五条指令就将

DGJD大文件切割成为4个2千万字节、1个18336321字节的子文件。要注意的是SKIP的值

不能错。

由此也不难看出，DD切割是“非损耗”式的切割，并且支持从任意位置开始的任意大小

的切割。

要将生成的ZZ1、ZZ2、ZZ3、ZZ4四个子文件组装为XDGJD，则：

dd if=zz1 of=xdgjd bs=1 count=20000000

dd if=zz2 of=xdgjd bs=1 count=20000000 seek=20000000

dd if=zz3 of=xdgjd bs=1 count=20000000 seek=40000000

dd if=zz4 of=xdgjd bs=1 count=20000000 seek=60000000

dd if=zz5 of=xdgjd bs=1 count=18336321 seek=80000000

其中SKIP参数改为SEEK参数，指明组装的新大文件XDGJD每次的开始位置是从文件头开

始多少字节。如果缺省，则组装从文件头开始，显然这不是我们每次都希望的，

所以需用SEEK参数明确指出开始位置。通过以上5个指令，即可将5个子文件重新组装

为一个大文件。将切割后生成的子文件重新用FTP传送，结果有的能够顺利传送，

有的仍然导致网络瘫痪，不怕，继续切割，切成每个一千万字节，再传，OK！成功传

送！

http://hll142475.blog.163.com/blog/static/621382009249558136/

dd工具使用

---------------------------------------------------------------------------------------------------------------------------------

dd重要参数

+----------------------------------------------------------+
|参数  |含义                                               |
|------+---------------------------------------------------|
|if    |输入设备或者文件                                   |
|------+---------------------------------------------------|
|of    |输出设备或文件                                     |
|------+---------------------------------------------------|
|bs    |dd缓冲区。设定dd时一次io拷贝多少数据，它与输入文件 |
|      |和输出文件的block size都没有直接联系。             |
|      |                                                   |
|      |一般来说，bs越大，拷贝速度越快                     |
|------+---------------------------------------------------|
|skip  |设定dd时从输入文件中跳过多少个dd缓冲区开始拷贝数据 |
|      |。一般在裸设备有offset时使用                       |
|------+---------------------------------------------------|
|seek  |设定dd时从输出文件中跳过多少个dd缓冲区开始写入数据 |
|      |。一般在裸设备有offset时使用                       |
|------+---------------------------------------------------|
|count |设置dd的io数量。如果省略了count，表示完全拷贝输入文|
|      |件到输出文件上                                     |
+----------------------------------------------------------+

dd参数适用范围

+-----------------------------------------------------------+
|备份源    |备份目的地  |适用参数                           |
|----------+------------+-----------------------------------|
|裸设备    |裸设备      |if of bs skip seek count           |
|----------+------------+-----------------------------------|
|裸设备    |文件系统    |if of bs skip count                |
|----------+------------+-----------------------------------|
|文件系统  |裸设备      |if of bs seek                      |
|----------+------------+-----------------------------------|
|文件系统  |文件系统    |if of bs                           |
+-----------------------------------------------------------+

dd拷贝oracle数据文件需要考虑的因素

+----------------------------------------------------------+
|因素        |含义                                         |
|------------+---------------------------------------------|
|block size  |dd一次io的buffer大小                         |
|------------+---------------------------------------------|
|offset      |只适用于裸设备，有些操作系统在裸设备上保留一 |
|            |定的空间给内部使用，拷贝时要跳过这部分内容   |
|------------+---------------------------------------------|
|block 0     |每一个oracle数据文件的头都包含一个与数据文件 |
|            |所在表空间的blocksize的相等的block           |
|            |                                             |
|            |这个block是不计算入oracle数据文件的bytes的， |
|            |但在操作系统中，它是会占用空间的。           |
+----------------------------------------------------------+

如何用dd测试磁盘速度？

首先要了解两个特殊的设备：

/dev/null：回收站、无底洞

/dev/zero：产生字符

Ø测试磁盘写能力

time dd if=/dev/zero of=/test.dbf bs=8k count=300000

因为/dev/zero是一个伪设备，它只产生空字符流，对它不会产生IO，所以，IO都会集中在of文件中，of文件只用于写，所以这个命令相当于测试磁
盘的写能力。

Ø测试磁盘读能力

time dd if=/dev/sdb1 of=/dev/null bs=8k

因为/dev/sdb1是一个物理分区，对它的读取会产生IO，/dev/null是伪设备，相当于黑洞，of到该设备不会产生IO，所以，这个命令的IO只发生在/
dev/sdb1上，也相当于测试磁盘的读能力。

Ø测试同时读写能力

time dd if=/dev/sdb1 of=/test1.dbf bs=8k

这个命令下，一个是物理分区，一个是实际的文件，对它们的读写都会产生IO（对/dev/sdb1是读，对/test1.dbf是写），假设他们都在一个磁盘中
，这个命令就相当于测试磁盘的同时读写能力。

是否需要skip数据文件的block 0？

不需要。

因为block 0位于offset之后，而block 0是所有数据文件都需要的，无论它是基于裸备还是文件系统，且block0的大小只与oracle的block size有
关，所以，把block 0也dd出来是必要的，不需要skip数据文件的block 0。

是否所有系统都有offset？

不是。aix和Turbo unix要注意offset，其他的一般没有。

如何计算数据文件的占用的实际空间大小？

实际的数据文件大小是在dba_data_files中的bytes + 1* blocksize。

如：

SQL> select file_name,bytes from dba_data_files;

FILE_NAME BYTESBLOCKSIZE

---------------------------------------- ---------- ----------

/opt/oracle/oradata/test1/system01.dbf360710144 8192

在操作系统查看文件大小：

[root@suk1 soft]# ls -l system01.dbf

-rw-r--r-- 1 oracle oinstall 360718336 Nov 15 11:53 system01.dbf

360718336 = 360710144 + 8192 (8192是数据文件所在表空间的blocksize)

一个裸设备的数据文件最多可以是多大？

这个和具体的操作系统和数据文件所在表空间的blocksize有关。

假设裸设备的大小是r，操作系统裸设备的offset为f，数据文件所在表空间的blocksize是b，则数据文件的最大大小为：

d=r – f – b*1 (1为block 0)

如裸设备大小为1008k，offset为0，表空间的blocksize为4k，则在此裸设备的数据文件的最大大小为：

d=1008-0-1*4=1004(k)

在裸设备之间拷贝数据文件

本例测试在裸设备之间拷贝oracle数据文件的步骤，并考虑两个问题：

1）假设旧设备比新设备小，把大的裸设备数据文件拷贝到小的裸设备是否可行？

2）旧裸设备比新裸设备小，是否可以拷贝数据文件到新裸设备上？

测试步骤：

#创建逻辑卷

[root@suk1 ~]# lvcreate -L 10m -n lv10_old vgdata

Logical volume "lv10_old" created

[root@suk1 ~]# lvcreate -L 20m -n lv20_new vgdata

Logical volume "lv20_new" created

[root@suk1 ~]# lvcreate -L 40m -n lv40_old vgdata

Logical volume "lv40_old" created

[root@suk1 ~]# lvcreate -L 30m -n lv30_new vgdata

Logical volume "lv30_new" created

#绑定裸设备

[root@suk1 ~]# raw /dev/raw/raw100/dev/vgdata/lv10_old

/dev/raw/raw100: bound to major 253, minor 2

[root@suk1 ~]# raw /dev/raw/raw200/dev/vgdata/lv20_new

/dev/raw/raw200: bound to major 253, minor 3

[root@suk1 ~]# raw /dev/raw/raw400/dev/vgdata/lv40_old

/dev/raw/raw400: bound to major 253, minor 4

[root@suk1 ~]# raw /dev/raw/raw300/dev/vgdata/lv30_new

/dev/raw/raw300: bound to major 253, minor 5

#基于裸设备创建表空间

SQL> create tablespace mytest datafile '/dev/raw/raw100' size 9m,'/dev/raw/raw400' size 20m;

Tablespace created.

#从小裸设备到大裸设备

[root@suk1 ~]# dd if='/dev/raw/raw100' of='/dev/raw/raw200'

20480+0 records in

20480+0 records out

#从大裸设备到小裸设备，但数据文件比小裸设备小

[root@suk1 ~]# dd if='/dev/raw/raw400' of='/dev/raw/raw300' bs=1024k count=25

25+0 records in

25+0 records out

注意：这里bs*count要大于原裸设备上的数据文件尺寸

SQL> startup mount

ORACLE instance started.

Total System Global Area167772160 bytes

Fixed Size 1260696 bytes

Variable Size 138412904 bytes

Database Buffers 25165824 bytes

Redo Buffers 2932736 bytes

Database mounted.

#重命名数据文件

SQL> alter database rename file '/dev/raw/raw100' to '/dev/raw/raw200';

Database altered.

SQL> alter database rename file '/dev/raw/raw400' to '/dev/raw/raw300';

Database altered.

SQL> alter database open;

Database altered.

从这个测试可以看出：

1）从小裸设备到大裸设备，只需把小裸设备的所有数据块dd到大裸设备即可

2）是否可以把大裸设备上的数据文件dd到小裸设备，取决于位于大裸设备上的数据文件尺寸(+block 0)是否比小裸设备小。如果数据文件小于小裸
设备，则可以把数据文件从大裸设备dd到小裸设备上，在dd过程中不需要太准确计算原来数据文件的大小，只要保证dd的总量大于数据文件并小于
小裸设备的尺寸即可。

3）如果数据文件大于小裸设备的尺寸，则肯定不能把它从大裸设备拷贝到小裸设备上

4）裸设备之间拷贝数据文件比裸设备到文件系统之间拷贝的有点在于：不需要精确计算要拷贝多少数据，只需要保证覆盖了数据文件+block 0即可
；而从裸设备到文件系统拷贝数据文件时，必须准确计算出要拷贝的数据量（数据文件+block 0），dd多一点或者少一点都会报错。

5）如果有offset的话，在裸设备之间拷贝数据文件的时候都要考虑（skip、seek）

从文件系统到裸设备拷贝ORACLE数据文件

这个比较简单，首先要保证裸设备的大小要大于等于oracle数据文件大小 + block 0，如果裸设备需要offset的话，则要保证更大，然后直接用dd
就可以。

如：

#源文件大小为10m

[root@suk1 ~]# ls -l /opt/oracle/oradata/test1/users02.dbf

-rw-r----- 1 oracle oinstall 10493952 Nov 30 11:07 /opt/oracle/oradata/test1/users02.dbf

#创建一个20m的裸设备

[root@suk1 ~]# lvcreate -L 20m -n lv20 vgdata

Logical volume "lv20" created

[root@suk1 ~]# raw /dev/raw/raw20 /dev/vgdata/lv20

/dev/raw/raw20: bound to major 253, minor 1

#dd文件到裸设备上

[root@suk1 ~]# dd if=/opt/oracle/oradata/test1/users02.dbf of=/dev/raw/raw20

20496+0 records in

20496+0 records out

注意：从文件系统到裸设备不用设置count

#重命名数据文件，打开数据库

SQL> alter database rename file '/opt/oracle/oradata/test1/users02.dbf' to '/dev/raw/raw20';

Database altered.

SQL> alter database open;

Database altered

从裸设备到文件系统拷贝ORACLE数据文件

这里用用到两个工具：

dbfsize 求出在裸设备或者文件系统上的oracle数据文件的大小，由oracle提高。

blockdev 求出裸设备的大小，操作系统自带。

要计算出要要拷贝的大小，否则报错，如：

[oracle@suk1 soft]$ dbfsize /dev/raw/raw1

Database file: /dev/raw/raw1

Database file type: raw device

Database file size: 44032 8192 byte blocks

[oracle@suk1 soft]$ time dd if=/dev/raw/raw1 of=system01.dbf bs=8k count=44032

SQL> alter database rename file '/opt/oracle/oradata/test1/system01.dbf' to '/soft/system01.dbf';

Database altered.

SQL> alter database open;

alter database open

*

ERROR at line 1:

ORA-01122: database file 1 failed verification check

ORA-01110: data file 1: '/soft/system01.dbf'

ORA-01200: actual file size of 44031 is smaller than correct size of 44032 blocks

--不要忘了block 0

[oracle@suk1 soft]$ rm system01.dbf

[oracle@suk1 soft]$ dd if=/dev/raw/raw1 of=system01.dbf bs=8k count=44033

SQL> startup

ORACLE instance started.

Total System Global Area167772160 bytes

Fixed Size 1260696 bytes

Variable Size 100664168 bytes

Database Buffers 62914560 bytes

Redo Buffers 2932736 bytes

Database mounted.

Database opened.

SQL> select file_name from dba_data_files;

FILE_NAME

------------------------------------------------------------

/soft/system01.dbf

/opt/oracle/oradata/test1/undotbs01.dbf

/opt/oracle/oradata/test1/sysaux01.dbf

/opt/oracle/oradata/test1/users01.dbf

/opt/oracle/oradata/test1/users02.dbf

是否可以把整个裸设备拷贝到文件中？

有时候可能需要把裸设备的数据文件迁移到文件系统中，那迁移的时候是否可以把整个裸设备拷出来？

不一定，要看裸设备是否有offset，如果有offset，则肯定不能全拷贝出来；如果没有offset，也要分情况：

1）裸设备中的数据文件 + block 0比裸设备小。

如果数据文件大小 + block 0比裸设备小，则不能将整个裸设备拷到文件系统的文件中。

[root@suk1 soft]# dd if=/dev/raw/raw1 of=system01.dbf bs=8k

SQL> startup mount

ORACLE instance started.

Total System Global Area167772160 bytes

Fixed Size 1260696 bytes

Variable Size 75498344 bytes

Database Buffers 88080384 bytes

Redo Buffers 2932736 bytes

Database mounted.

SQL> alter database rename file '/opt/oracle/oradata/test1/system01.dbf' to '/soft/system01.dbf';

Database altered.

SQL> alter database open;

alter database open

*

ERROR at line 1:

ORA-01157: cannot identify/lock data file 1 - see DBWR trace file

ORA-01110: data file 1: '/soft/system01.dbf'

Errors in file /opt/oracle/admin/test1/bdump/test1_dbw0_9564.trc:

ORA-01157: cannot identify/lock data file 1 - see DBWR trace file

ORA-01110: data file 1: '/soft/system01.dbf'

ORA-27046: file size is not a multiple of logical block size

Additional information: 1

ORA-1157 signalled during: ALTER DATABASE OPEN...

这是因为裸设备已被数据文件使用部分的逻辑块与未使用部分的逻辑块大小不一致。这种情况下，只能拷贝裸设备中数据文件大小 + block 0部分
。

2）裸设备中的数据文件 + block 0等于裸设备大小

这种情况是可以完全拷贝的。

[root@suk1 soft]# lvcreate -L 1008k -n test1008 vgdata

Logical volume "test1008" created

[root@suk1 soft]# raw /dev/raw/raw1008 /dev/vgdata/test1008

/dev/raw/raw1008: bound to major 253, minor 0

SQL> create tablespace test blocksize 4k datafile '/dev/raw/raw1008' size 1004k;

Tablespace created.

SQL> select file_name,bytes,bytes/blocks blocksize from dba_data_files;

FILE_NAME BYTESBLOCKSIZE

------------------------- ---------- ----------

/dev/raw/raw1008 1028096 4096

1028096 + 4096 =1008(k)

SQL> startup mount

ORACLE instance started.

[oracle@suk1 soft]$ dd if=/dev/raw/raw1008 of=test.dbf

2016+0 records in

2016+0 records out

Total System Global Area167772160 bytes

Fixed Size 1260696 bytes

Variable Size 130024296 bytes

Database Buffers 33554432 bytes

Redo Buffers 2932736 bytes

Database mounted.

SQL> alter database rename file '/dev/raw/raw1008' to '/soft/test.dbf';

Database altered.

SQL> alter database open;

Database altered.

各种拷贝方式的比较

Ø裸设备到裸设备

需要考虑裸设备的offset；要保证新设备的大小满足数据文件的需求；不需要精确计算要拷贝的尺寸，保证大于等于数据文件大小+block 0即可（
必须从数据字段中才能查出oracle数据文件的大小）

Ø裸设备到文件系统

需要考虑裸设备的offset；必须精确计算要拷贝的尺寸，包括的尺寸必须刚好等于数据文件大小+block 0（因为无法通过操作系统命令看数据文件
的大小，必须通过oracle数据字典查看）

Ø文件系统到裸设备

需要考虑裸设备的offset；不需要精确计算要拷贝的尺寸，把文件全部拷到裸设备即可。

Ø文件系统到文件系统

不用考虑offset。不需要精确计算要拷贝的尺寸，把文件全部拷贝过去就可以。

验证备份

Oracle提高dbv工具来验证备份文件是否有损坏：

[oracle@suk1 ~]$ dbv file=/dev/raw/raw300

DBVERIFY: Release 10.2.0.3.0 - Production on Fri Nov 30 16:49:59 2007

Copyright (c) 1982, 2005, Oracle.All rights reserved.

DBVERIFY - Verification starting : FILE = /dev/raw/raw300

DBVERIFY - Verification complete

Total Pages Examined : 2560

Total Pages Processed (Data) : 0

Total Pages Failing (Data) : 0

Total Pages Processed (Index): 0

Total Pages Failing (Index): 0

Total Pages Processed (Other): 8

Total Pages Processed (Seg): 0

Total Pages Failing (Seg) : 0

Total Pages Empty : 2552

Total Pages Marked Corrupt: 0

Total Pages Influx : 0

Highest block SCN : 487492 (0.487492)
* dd命令

目录

    一、dd命令的解释。
     1. 1.定义
     2. 2.参数
    二、dd应用实例。
    展开

编辑本段一、dd命令的解释。

1.定义

dd是Linux/UNIX 下的一个非常有用的命令，作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。

2.参数

1. if=文件名：输入文件名，缺省为标准输入。即指定源文件。< if=input file >
2. of=文件名：输出文件名，缺省为标准输出。即指定目的文件。< of=output file >
3. ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。
obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。
bs=bytes：同时设置读入/输出的块大小为bytes个字节。
4. cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。
5. skip=blocks：从输入文件开头跳过blocks个块后再开始复制。
6. seek=blocks：从输出文件开头跳过blocks个块后再开始复制。
注意：通常只用当输出文件是磁盘或磁带时才有效，即备份到磁盘或磁带时才有效。
7. count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。
8. conv=conversion：用指定的参数转换文件。
ascii：转换ebcdic为ascii
ebcdic：转换ascii为ebcdic
ibm：转换ascii为alternate ebcdic
block：把每一行转换为长度为cbs，不足部分用空格填充
unblock：使每一行的长度都为cbs，不足部分用空格填充
lcase：把大写字符转换为小写字符
ucase：把小写字符转换为大写字符
swab：交换输入的每对字节
noerror：出错时不停止
notrunc：不截短输出文件
sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。

编辑本段二、dd应用实例。

1.将本地的/dev/hdb整盘备份到/dev/hdd
dd if=/dev/hdb of=/dev/hdd
2.将/dev/hdb全盘数据备份到指定路径的image文件
dd if=/dev/hdb of=/root/image
3.将备份文件恢复到指定盘
dd if=/root/image of=/dev/hdb
4.备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径
dd if=/dev/hdb | gzip > /root/image.gz
5.将压缩的备份文件恢复到指定盘
gzip -dc /root/image.gz | dd of=/dev/hdb
6.备份磁盘开始的512个字节大小的MBR信息到指定文件
dd if=/dev/hda of=/root/image count=1 bs=512
count=1指仅拷贝一个块；bs=512指块大小为512个字节。
恢复：dd if=/root/image of=/dev/hda
7.备份软盘
dd if=/dev/fd0 of=disk.img count=1 bs=1440k (即块大小为1.44M)
8.拷贝内存内容到硬盘
dd if=/dev/mem of=/root/mem.bin bs=1024 (指定块大小为1k)
9.拷贝光盘内容到指定文件夹，并保存为cd.iso文件
dd if=/dev/cdrom(hdc) of=/root/cd.iso
10.增加swap分区文件大小
第一步：创建一个大小为256M的文件：
dd if=/dev/zero of=/swapfile bs=1024 count=262144
第二步：把这个文件变成swap文件：
mkswap /swapfile
第三步：启用这个swap文件：
swapon /swapfile
第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件：
/swapfile swap swap default 0 0
11.销毁磁盘数据
dd if=/dev/urandom of=/dev/hda1
注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。
12.测试硬盘的读写速度
dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
dd if=/root/1Gb.file bs=64k | dd of=/dev/null
通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。
13.确定硬盘的最佳块大小：
dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file
dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file
dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file
通过比较以上命令输出中所显示的命令执行时间，即可确定系统最佳的块大小。
14.修复硬盘
dd if=/dev/sda of=/dev/sda
当硬盘较长时间（比如1，2年）放置不使用后，磁盘上会产生magnetic fluxpoint。当磁头读到这些区域时会遇到困难，并可能导致I/O错误。当这
种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数据起死回生。且这个过程是安全，高效的。

扩展阅读：
      + 1
       
        http://blog.csdn.net/liumang_D/archive/2009/02/17/3899462.aspx
* 用dd命令测试磁盘写入性能

作者:admin /分类:linux /Tag:硬盘, 速度测试 /418 views 
字号：L M S

1. dd if=/dev/zero of=test bs=64k count=16k
这个很不准确的，因为命令结束的时候数据还没有真正写到磁盘上去
2. dd if=/dev/zero of=test bs=64k count=16k conv=fsync
这个还算准确，数据已经写入磁盘
3. dd if=/dev/zero of=test bs=64k count=4k oflag=dsync
这个可以当成是模拟数据库插入操作，所以很慢

接着让我们来看看buyvm的磁盘性能
dd if=/dev/zero of=test bs=64k count=16k
1073741824 bytes (1.1 GB) copied, 2.99687 seconds, 358 MB/s
第一种方式得到的结果貌似很快

dd if=/dev/zero of=test bs=64k count=16k conv=fsync
1073741824 bytes (1.1 GB) copied, 13.9241 seconds, 77.1 MB/s
这次慢了很多，这个数据才有参考价值

dd if=/dev/zero of=test bs=64k count=2k oflag=dsync
134217728 bytes (134 MB) copied, 177.813 seconds, 755 kB/s
这是buyvm的真正实力，在84的vps上测可是有20M/s的

* dd 命令用来测试硬盘读写速度(转) 2011-12-31 11:27:17

分类：系统运维

dd 命令用来测试硬盘读写速度(转)
dd 是 Linux/UNIX 下的一个非常有用的命令，作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。
1. 命令简介，dd 的主要选项：
指定数字的地方若以下列字符结尾乘以相应的数字:
b=512, c=1, k=1024, w=2, xm=number m

if=file
输入文件名，缺省为标准输入。

of=file
输出文件名，缺省为标准输出。

ibs=bytes
一次读入 bytes 个字节(即一个块大小为 bytes 个字节)。

obs=bytes
一次写 bytes 个字节(即一个块大小为 bytes 个字节)。

bs=bytes
同时设置读写块的大小为 bytes ，可代替 ibs 和 obs 。

cbs=bytes
一次转换 bytes 个字节，即转换缓冲区大小。

skip=blocks
从输入文件开头跳过 blocks 个块后再开始复制。

seek=blocks
从输出文件开头跳过 blocks 个块后再开始复制。(通常只有当输出文件是磁盘或磁带时才有效)。

count=blocks
仅拷贝 blocks 个块，块大小等于 ibs 指定的字节数。

conv=conversion[,conversion...]
用指定的参数转换文件。

转换参数:
ascii 转换 EBCDIC 为 ASCII。

ebcdic 转换 ASCII 为 EBCDIC。

ibm 转换 ASCII 为 alternate EBCDIC.

block 把每一行转换为长度为 cbs 的记录，不足部分用空格填充。

unblock 使每一行的长度都为 cbs ，不足部分用空格填充。

lcase 把大写字符转换为小写字符。

ucase 把小写字符转换为大写字符。

swab 交换输入的每对字节。

noerror 出错时不停止。

notrunc 不截短输出文件。

sync 把每个输入块填充到ibs个字节，不足部分用空(NUL)字符补齐。

2.实例分析
2.1.数据备份与恢复
2.1.1整盘数据备份与恢复

备份：
dd if=/dev/hdx of=/dev/hdy
将本地的/dev/hdx整盘备份到/dev/hdy
dd if=/dev/hdx of=/path/to/image
将/dev/hdx全盘数据备份到指定路径的image文件
dd if=/dev/hdx | gzip >/path/to/image.gz
备份/dev/hdx全盘数据，并利用gzip工具进行压缩，保存到指定路径

恢复：
dd if=/path/to/image of=/dev/hdx
将备份文件恢复到指定盘
gzip -dc /path/to/image.gz | dd of=/dev/hdx
将压缩的备份文件恢复到指定盘

2.1.2.利用netcat远程备份
dd if=/dev/hda bs=16065b | netcat < targethost-IP > 1234
在源主机上执行此命令备份/dev/hda
netcat -l -p 1234 | dd of=/dev/hdc bs=16065b
在目的主机上执行此命令来接收数据并写入/dev/hdc
netcat -l -p 1234 | bzip2 > partition.img
     netcat -l -p 1234 | gzip > partition.img

以上两条指令是目的主机指令的变化分别采用bzip2 gzip对数据进行压缩，并将备份文件保存在当前目录。

2.1.3.备份MBR
备份：
dd if=/dev/hdx of=/path/to/image count=1 bs=512

备份磁盘开始的512Byte大小的MBR信息到指定文件
恢复：
dd if=/path/to/image of=/dev/hdx
将备份的MBR信息写到磁盘开始部分
2.1.4.备份软盘
dd if=/dev/fd0 of=disk.img count=1 bs=1440k
将软驱数据备份到当前目录的disk.img文件
2.1.5.拷贝内存资料到硬盘
dd if=/dev/mem of=/root/mem.bin bs=1024
将内存里的数据拷贝到root目录下的mem.bin文件
2.1.6.从光盘拷贝iso镜像
dd if=/dev/cdrom of=/root/cd.iso
拷贝光盘数据到root文件夹下，并保存为cd.iso文件

2.2.增加Swap分区文件大小
dd if=/dev/zero of=/swapfile bs=1024 count=262144

创建一个足够大的文件（此处为256M）
mkswap /swapfile
把这个文件变成swap文件
swapon /swapfile
启用这个swap文件
/swapfile swap swap defaults 0 0
在每次开机的时候自动加载swap文件, 需要在 /etc/fstab 文件中增加一行

2.3.销毁磁盘数据
dd if=/dev/urandom of=/dev/hda1

利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。执行此操作以后，/dev/hda1将无法挂载，创建和拷贝操作无法执行。
2.4磁盘管理
2.4.1.得到最恰当的block size
dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file
     dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file
     dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file  
     dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file

通过比较dd指令输出中所显示的命令执行时间，即可确定系统最佳的block size大小

2.4.2测试硬盘读写速度
dd if=/root/1Gb.file bs=64k | dd of=/dev/null
     dd if=/dev/zero of=/root/1Gb.file bs=1024 count=1000000

通过上两个命令输出的执行时间，可以计算出测试硬盘的读／写速度

2.4.3.修复硬盘
dd if=/dev/sda of=/dev/sda
当硬盘较长时间（比如1，2年）放置不使用后，磁盘上会产生magnetic flux point。当磁头读到这些区域时会遇到困难，并可能导致I/O错误。当
这种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数据起死回生。且这个过程是安全，高效的。

------备注-----附件----摘抄---
这个一般都是用来测磁盘阵列的，比如我们单位买的HP VA7110，14块146G 10k转的硬盘做raid 1+0，测出来读是100MB/s、写是50MB/s、读写是
40MB/s、40MB/s，与HP宣传手册上的读160MB/s、写84MB/s还是有较大差距，HP的人说这个最高数据是满配时测的，cache为2G，我们只有1G，硬盘
多半是15k的，硬盘肯定是加满的。

可以通过使用dd if=/dev/zero of=/file 来测试磁盘的纯写入性能
使用dd if=/file of=/dev/null 来测试磁盘的纯读取性能
使用dd if=/file1 of=/file2 来测试磁盘的读写性能

有一些特殊的设备文件。例如/dev/zero文件代表一个永远输出 0的设备文件，使用它作输入可以得到全为空的文件。因此可用来创建新文件和以覆
盖的方式清除旧文件。下面使用dd命令将从zero设备中创建一个10K大小（bs决定每次读写1024字节，count定义读写次数为10次），但内容全为0的
文件。
　　# dd if=/dev/zero of=file count=10 bs=1024
　 10+0 records in
　　10+0 records out
　　10240 bytes transferred in 0.001408 secs (7267903 b ytes/sec)

* DD 命令如何测试磁盘速度？

inux用dd测试磁盘速度
2009-08-27 17:44
首先要了解两个特殊的设备：

/dev/null：回收站、无底洞

/dev/zero：产生字符

Ø 测试磁盘写能力

time dd if=/dev/zero of=~/test/test bs=8k count=300000       理论传输速度
time dd if=/dev/zero of=~/test/test bs=64k count=16k conv=fsync   加上同步参数，结果较为准确

因为/dev//zero是一个伪设备，它只产生空字符流，对它不会产生IO，所以，IO都会集中在of文件中，of文件只用于写，所以这个命令相当于测试
磁盘的写能力。

Ø 测试磁盘读能力

time dd if=/dev/sdb1 of=/dev/null bs=8k
time dd if=/dev/zero of=~/test/test bs=64k count=16k conv=fsync

因为/dev/sdb1是一个物理分区，对它的读取会产生IO，/dev/null是伪设备，相当于黑洞，of到该设备不会产生IO，所以，这个命令的IO只发生在/
dev/sdb1上，也相当于测试磁盘的读能力。

Ø 测试同时读写能力

time dd if=/dev/sdb1 of=~/test/test bs=8k
time dd if=/dev/zero of=~/test/test bs=64k count=16k conv=fsync

这个命令下，一个是物理分区，一个是实际的文件，对它们的读写都会产生IO（对/dev/sdb1是读，对/test1.dbf是写），假设他们都在一个磁盘中
，这个命令就相当于测试磁盘的同时读写能力。

Linux环境下。

* Linux使用dd命令测试硬盘读写速度
Linux服务器装好系统之后，想要知道硬盘的读写是否能满足服务的需要，如果不满足硬盘的IO就是服务的一个瓶 
颈。所以我们需要测试硬盘的读写速度，测试的方法很多，下面是使用Linux 自带的dd命令测试硬盘的读写速度 
。                                                                                     
                                                                                      
time有计时作用，dd用于复制，从if读出，写到of。if=/dev/zero不产生IO，因此可以用来测试纯写速度。同理   
of=/dev/null不产生IO，可以用来测试纯读速度。bs是每次读或写的大小，即一个块的大小，count是读写块的数  
量。                                                                                     

测/data目录所在磁盘的纯写速度：                                                                
                                                                                           
[root@nagios ~]# time dd if=/dev/zero of=/var/test bs=8k count=1000000                     
 1000000+0 records in                                                                                                             
 1000000+0 records out                                                                     
 8192000000 bytes (8.2 GB) copied, 52.5749 seconds, 156 MB/s                                                                      
                                                                                           
real    0m55.841s                                                                          
 user    0m0.507s                                                                          
 sys    0m15.706s                                                                          
                                                                                           
##红色部分是因为使用了time命令才显示的，因此需要time命令来计算复制的时间。                          
                                                                                          
测/data目录所在磁盘的纯读速度：                                                              
                                                                                         
[root@nagios ~]# time dd if=/var/test of=/dev/null bs=8k                                 
 1000000+0 records in                                                                    
 1000000+0 records out                                                                   
 8192000000 bytes (8.2 GB) copied, 49.0088 seconds, 167 MB/s                             
                                                                                         
real    0m49.025s                                                                        
 user    0m0.559s                                                                        
 sys    0m6.383s                                                                         
                                                                                         
测读写速度：                                                                                                                      
                                                                                                                                  
[root@nagios ~]# time dd if=/var/test of=/tmp/test bs=64k                                                                         
 125000+0 records in                                                                                                              
 125000+0 records out                                                                                                             
 8192000000 bytes (8.2 GB) copied, 129.239 seconds, 63.4 MB/s                                                                     
                                                                                                                                  
real    2m9.251s                                                                                                                  
 user    0m0.114s                                                                                                                 
 sys    0m21.494s                                                                                                                 
                                                                                                                                  
看来这个测试结果还不错，嘿嘿                                                                                                      

备注：理论上测试复制量越大测试结果越准确。                                                                                        
                                                                                                                                  
正常测试的时候可能不止测试一边，可能会需要很多遍求取平均值，这个测试结果在普通的重定向是没有效果的                                
之后 google 了一下用下面的方式重定向到一个文件                                                                                    
                                                                                                                                  
dd if=/dev/zero of=/var/test bs=8k count=1000000  2>> info                                                                        
                                                                                                                                  
这样测试的结果就到info文件里面了                                                                                                  
