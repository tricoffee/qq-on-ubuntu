
C/C++ mode相关资料

* Emacs C mode指令速查列表

本文件列出了在Emacs C mode下面常見的指令。
所謂的C mode就是在Emacs下面撰寫C語言程式的模式，在這個模式下面Emacs會提供一些針對C語言所增加的特性及功能，對於C的程式設計師而言是相當好用的。
雖然這篇文章著重在C mode之下，但是大部分的指令對於其他的模式依舊適用。

** 避免被其他的設定所影響

Emacs本身是一個非常有彈性的編輯器，因此經過相當的設定之後，原本預設的設定可能會被修改掉了。為了讓您的Emacs能夠符合本文件所列出的
熱鍵及弁遄C建議您在home directory的.emacs檔案中加入下面的設定。

             +-----------------------------------------------------------------------------------------------------+             
             |(setq inhibit-default-init t) ; 避免被系統預設的設定所影響                                           |             
             |(keyboard-translate ?C-h ?C-?) ; 可以避免backspace變成help hot-key的問題                             |             
             |(keyboard-translate ?C- ?C-h) ; 將help hot-key由Ctrl-h轉成Ctrl-                                      |             
             |;; 以下的設定是讓C mode具有 K&R 所建議的樣式                                                         |             
             |(setq c-mode-hook '(lambda () (auto-fill-mode 1)))                                                   |             
             |(setq c-indent-level 5)                                                                              |             
             |(setq c-continued-statement-offset 5)                                                                |             
             |(setq c-argdecl-indent 0)                                                                            |             
             |(setq c-brace-offset -5)                                                                             |             
             |(setq c-label-offset -5)                                                                             |             
             +-----------------------------------------------------------------------------------------------------+             

** 進入及離開Emacs

    如果您的系統上面已經安裝好emacs，只要在shell下面執行emacs xxx.c就可以以C mode進入emacs中。如果您要離開emacs，則需要在emacs中
    鍵入：Ctrl-x-c。

** 檔案控制及存取

             +-----------------------------------------------------------------------------------------------------+             
             |Ctrl-x Ctrl-s       |儲存目前正在編輯視窗內的檔案                                                    |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x s            |儲存所有目前在編輯的檔案                                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x k            |關閉目前正在編輯視窗的檔案，但是不存檔                                          |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x Ctrl-c       |跳出emacs                                                                       |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x Ctrl-w       |另存新檔                                                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x Ctrl-f       |開啟檔案                                                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x Ctrl-r       |以唯讀模式開啟檔案                                                              |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x Ctrl-q       |將原本是唯讀的檔案變成可寫入                                                    |             
             +-----------------------------------------------------------------------------------------------------+             

** 游標的移動

             +-----------------------------------------------------------------------------------------------------+             
             |Ctrl-b              |往回移一個字元                                                                  |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-f              |往後移一個字元                                                                  |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-p              |往上移動一行                                                                    |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-n              |往下移動一行                                                                    |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-a              |移到行首                                                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-e              |移到行末                                                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc b               |往前移一個英文字                                                                |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc f               |往後移一個英文字                                                                |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc v               |往上移一頁                                                                      |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-v              |往下移一頁                                                                      |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc <               |移到檔案最前面                                                                  |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc >               |移到檔案最後面                                                                  |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc a               |移到敘述(statement)最前面                                                       |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc e               |移到敘述最後面                                                                  |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc Ctrl-a          |移到Function最前面                                                              |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Esc Ctrl-e          |移到Function最後面                                                              |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-u              |重複前一個指令四次                                                              |             
             +-----------------------------------------------------------------------------------------------------+             

** 刪除與回復

             +-----------------------------------------------------------------------------------------------------+             
             |DEL                 |刪除游標左邊的字元                                                              |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-d              |刪除游標所在位置的字元                                                          |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC DEL             |刪除游標左邊的英文字                                                            |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC d               |刪除游標右邊的英文字                                                            |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-k              |刪除所有在游標右邊的字元                                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC Shift-2         |設定Region的Mark                                                                |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-w              |從設定Region Mark到目前游標之間的字元全部刪除                                   |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-y              |將被Ctrl-w指令所刪除的字元回復                                                  |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC y               |將被Ctrl-y所回復的字元再刪除                                                    |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-u              |重複前一個命令四次                                                              |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x u            |回復前一個命令所造成的影響（Undo）                                              |             
             +-----------------------------------------------------------------------------------------------------+             

** 搜尋與置換

             +-----------------------------------------------------------------------------------------------------+             
             |Ctrl-r              |向上搜尋                                                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC                 |在搜尋模式中按ESC可以離開搜尋模式                                               |             
             |--------------------+--------------------------------------------------------------------------------|             
             |                    |啟動置換模式。在置換模式中，首先要輸入將被置換掉的字串，然後輸入新字串。接下來游|             
             |                    |標會移到需要被置換的地方。你需要用下面的key來指定動作：                         |             
             |                    |                                                                                |             
             |                    |  * y：置換目前游標所在的字串，並且移到下一個可被置換的字串。                   |             
             |ESC %               |  * n：跳過目前游標所在的字串。移到下一個可被置換的字串。                       |             
             |                    |  * !：將整個檔案一次置換完畢，不進行任何詢問。                                 |             
             |                    |  * ESC：結束置換模式。                                                         |             
             |                    |  * .：將目前的字串置換後，即離開置換模式。                                     |             
             |                    |  * ^：回到前一個符合置換的地方。                                               |             
             +-----------------------------------------------------------------------------------------------------+             

** 拷貝與搬移

             +-----------------------------------------------------------------------------------------------------+             
             |Ctrl-@              |設定標記起始點                                                                  |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-w              |剪下標記起始點至目前游標所在位置的文字。                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Alt-w               |複製標記起始點至目前游標所在位置的文字。                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-y              |貼上之前所剪下或複製的文字至目前游標所在的位置。                                |             
             +-----------------------------------------------------------------------------------------------------+             

** 多重視窗控制

             +-----------------------------------------------------------------------------------------------------+             
             |Ctrl-x 0            |刪除目前的視窗（不會關閉正在編輯的檔案）                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x 1            |刪除其他的視窗（不會關閉正在編輯的檔案）                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x 2            |水平分割視窗                                                                    |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x 3            |垂直分割視窗                                                                    |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x b            |將目前視窗內的檔案切換成其他的檔案                                              |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x o            |將游標移動到其他視窗之內                                                        |             
             +-----------------------------------------------------------------------------------------------------+             

** 加入註解

             +-----------------------------------------------------------------------------------------------------+             
             |ESC ;               |在Emacs的C mode中按下'ESC ;'就會出現註解符號/* 及*/。並且在編輯時會自動幫你換行 |             
             |                    |。                                                                              |             
             +-----------------------------------------------------------------------------------------------------+             

** 編譯程式

             +-----------------------------------------------------------------------------------------------------+             
             |ESC x compile       |在C mode中輸入ESC x compile就可以在不離開Emacs的狀況下進行程式的編譯。此時，    |             
             |                    |emacs會顯示預設的編譯命令是make -k。compile之後，所有訊息都會出現在另一個視窗。 |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x `            |編譯完成後，如果有錯誤發生，按下Ctrl-x `就可以跳到下一個有錯誤的地方，修改完成後|             
             |                    |，再按一次就可以繼續修改下一個錯誤，一直到沒有其他的錯誤為止。                  |             
             +-----------------------------------------------------------------------------------------------------+             

** SHELL

             +-----------------------------------------------------------------------------------------------------+             
             |ESC x shell         |進入Shell mode。可以讓你在emacs的視窗中使用shell。                              |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-c Ctrl-c       |將正在執行的程式中斷                                                            |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-c Ctrl-z       |暫停目前的工作                                                                  |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-c Ctrl-r       |將游標移動到最後一個命令                                                        |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-c Ctrl-y       |重複執行前一個命令。                                                            |             
             +-----------------------------------------------------------------------------------------------------+             

** Tags

tags是一個很有用的工具，他可以幫助您將source檔案中所有function定義，及 typedef的定義，全部收集成為一個資料庫，讓你可以很輕易的跳
到您要的函數定義。在使用emacs的tags機制之前，您需要先將有關的tag的資料庫建構出來。建構的方法如下：

% etags -tlist_of_source_file

list_of_source_file就是您要做紀錄的原始程式檔案。您可以指定很多個檔案。例如：

% etags -t *.[ch]

其中，-t的參數主要是要求etags將typedef的宣告一併放入資料中。

在Emacs中，如果要使用tags的機制，可以使用下表的命令：

             +-----------------------------------------------------------------------------------------------------+             
             |ESC .               |尋找函數的定義。你可以透過這個命令來找尋你要的函數。輸入此命令後，emacs會提示訊 |             
             |                    |息，要求你輸入要找尋的函數名稱。或是typedef的定義。                             |             
             |--------------------+--------------------------------------------------------------------------------|             
             |Ctrl-x 4 .          |功能同ESC .。但是會把找到的函數定義顯示在另外一個視窗。                         |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC x               |使用其他的TAGS檔案                                                              |             
             |visit-tags-table    |                                                                                |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC x tags-search   |以regular expression的方式來找尋函數名稱。                                      |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC ,               |輸入ESC x tags-search之後，可以用這個來進行尋找下一個的動作。                   |             
             |--------------------+--------------------------------------------------------------------------------|             
             |ESC x               |以regular expression的方式來置換函數名稱。                                      |             
             |tags-query-replace  |                                                                                |             
             +-----------------------------------------------------------------------------------------------------+             

** 其他

+-----------------------------------------------------------------------------------------------------+
|Ctrl-x Ctrl-b       |目前正在處理的檔案列表                                                          |
|--------------------+--------------------------------------------------------------------------------|
|Ctrl-x b            |將目前視窗內的檔案切換成其他的檔案                                              |
|--------------------+--------------------------------------------------------------------------------|
|Ctrl-x d            |會在目前的視窗中顯示目錄列表                                                    |
|--------------------+--------------------------------------------------------------------------------|
|Ctrl-x 4 d          |在其他視窗顯示目錄列表                                                          |
+-----------------------------------------------------------------------------------------------------+

[END]



* 在Emacs下用C/C++编程
http://www.caole.net/diary/emacs_write_cpp.html                                                                         

** Table of Contents

  * 版权说明和参考文献
      + 参考文献：
      + 版权说明：
  * 序
  * 基本流程
  * 基本环境设置
      + 编辑环境配置
      + 自动补齐
  * 编译和调试程序
  * 阅读代码

版权说明和参考文献

按照惯例，我写的文章在最开始处放版权说明和参考文献。

*** 参考文献：

  * hhuu @ newsmth 的《Emacs的日常生活》
  * emacs 的文档
  * emacs 相关插件的文档

*** 版权说明：

转载请注明转自曹乐的个人主页 www.caole.net，请保证全文转载，尤其不可省略这一部分。

** 序

用emacs写程序也有5个年头了，深切地体会到Emacs的强大。程序员有三种，一种是用vi的，一种是用emacs的，还有一种是其他。或许有些夸张，
但也颇能体现出emacs在程序员中的地位。

emacs最大的问题在于入门门槛较高。它看起来和多数人想象中的IDE相差甚远，很多人看到emacs的第一眼就觉得它是个记事本（还是个非常难用的
记事本），稍微好些的往往觉得emacs也就是个ultraEditor而已，真是暴殄天物了。

我是个懒人，不喜欢记太多的快捷键，相信很多人和我一样。所以从我后面的叙述可以看出来，除了常用的命令都是快捷键外，其他命令多数都是
用M-x执行或者用鼠标点菜单。这仅仅是个人风格问题，先说明一下。

我的基本编程环境是：

  * Debian GNU/Linux sid 操作系统
  * Gnome 2.10.0 桌面环境
  * GUN Emacs 23.0.0.1 for debian
  * 使用 Gnu tool chains(gcc,make,gdb等等)

后面的叙述都基于上述环境。另外，本文主要针对C/C++程序开发，对其他语言有些也适用，从难度上说，本文主要针对入门者。

本文肯定会有很多错误，请指正，谢谢。

** 基本流程

写C++程序基本上是这么几个步骤：

 1. 编辑代码
 2. 编写Makefile
 3. 编译代码，修改编译错误
 4. 调试代码，修改逻辑错误

当然，往往还需要阅读别人的代码。

根据上述步骤，本文主要针对以下几个方面：

  * 配置Emacs，建立便利的代码编辑环境和Makefile编写环境。
  * 在Emacs中编译代码，并修改编译错误。
  * 在Emacs中配合GDB调试程序。
  * 利用cscope和ecb在emacs中阅读代码。

** 基本环境设置
*** 编辑环境配置

要写C++程序，当然要用到cc-mode插件。CC-Mode原本是支持C语言的，但现在也能支持很多语言，比如 C++，Java，Objective-C，CORBA，AWK，
Pike等等。CC-Mode是gnu-emacs的标准插件。如果您要求不高，那么默认的配置或许就能满足。CC-Mode的各种行为都可以自由地定制，您可以参考
这里的文档：CC-Mode参考文档

这里是我的.emacs文件中关于CC-Mode配置的部分，仅供参考：

;;;; CC-mode配置  http://cc-mode.sourceforge.net/
(require 'cc-mode)
(c-set-offset 'inline-open 0)
(c-set-offset 'friend '-)
(c-set-offset 'substatement-open 0)

;;;;我的C/C++语言编辑策略

(defun my-c-mode-common-hook()
  (setq tab-width 4 indent-tabs-mode nil)
  ;;; hungry-delete and auto-newline
  (c-toggle-auto-hungry-state 1)
  ;;按键定义
  (define-key c-mode-base-map [(control \`)] 'hs-toggle-hiding)
  (define-key c-mode-base-map [(return)] 'newline-and-indent)
  (define-key c-mode-base-map [(f7)] 'compile)
  (define-key c-mode-base-map [(meta \`)] 'c-indent-command)
;;  (define-key c-mode-base-map [(tab)] 'hippie-expand)
  (define-key c-mode-base-map [(tab)] 'my-indent-or-complete)
  (define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)

注意一下，上面最后两行是代码自动补齐的快捷键。后面我会提到代码自动补齐。

  ;;预处理设置
  (setq c-macro-shrink-window-flag t)
  (setq c-macro-preprocessor "cpp")
  (setq c-macro-cppflags " ")
  (setq c-macro-prompt-flag t)
  (setq hs-minor-mode t)
  (setq abbrev-mode t)
)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;;;;我的C++语言编辑策略
(defun my-c++-mode-hook()
  (setq tab-width 4 indent-tabs-mode nil)
  (c-set-style "stroustrup")
;;  (define-key c++-mode-map [f3] 'replace-regexp)
)

*** 自动补齐

自动补齐通常用的都是hippie-expand，我也用了很长时间。不过有时候会觉得这个自动补齐“傻”了一点，常会补齐出一些毫不相干的东西，因为
hippie-expand是根据你敲过的词和kill-ring等进行判断的，并不对程序语法进行分析。

所以你还需要安装一个代码分析工具，然后把它加进hippie-expand的扩展策略里去。我们可以用semantic。实际上，hippie-expand＋semantic是
我所发现的最好的选择了，如果您有更好的，请您也告诉我一声:)

Semantic是CEDET 中的一个工具，CEDET是Collection of Emacs Development Environment Tools的缩写，它包含了好几个工具，都挺不错的。可
惜我只会用其中两个。

您可以在.emacs中对Semantic进行配置，下面是我的.emacs相关的配置，仅供参考：

导入cedet：

(load-file "~/lib/emacs-lisp/cedet-1.0pre3/common/cedet.el")

配置Semantic的检索范围:

(setq semanticdb-project-roots 
      (list
        (expand-file-name "/")))

自定义自动补齐命令，这部分是抄hhuu的，如果在单词中间就补齐，否则就是tab。

(defun my-indent-or-complete ()
   (interactive)
   (if (looking-at "\\>")
      (hippie-expand nil)
      (indent-for-tab-command))
 )

(global-set-key [(control tab)] 'my-indent-or-complete)

hippie的自动补齐策略，优先调用了senator的分析结果：

(autoload 'senator-try-expand-semantic "senator")

(setq hippie-expand-try-functions-list
      '(
        senator-try-expand-semantic
        try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-expand-list
        try-expand-list-all-buffers
        try-expand-line
        try-expand-line-all-buffers
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-whole-kill
        )
)

注意一下我前面CC-Mode配置中有这么两行：

(define-key c-mode-base-map [(tab)] 'my-indent-or-complete)
(define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)

这样，我们在CC-Mode中就可以调用自定义的hippie补全了，快捷键是Tab。

另外，我还把快捷键“Alt + / ”绑定到了semantic-ia-complete-symbol-menu命令上，这是semantic的命令，它会根据分析结果弹出补齐的菜单，
效果如图显示：

自动补齐效果图                                    

CEDET中还有一个不错的工具是speedbar，你可以用它在多个文件中快速切换。在我的.emacs配置文件里，我把speedbar关联到了F5上：

(global-set-key [(f5)] 'speedbar)

这样用F5就可以调出speedbar，效果如下：

speedbar                                          

不过说实话，我自己很少用到speedbar，我通常都是用dired配合bookmark使用:)

** 编译和调试程序

按上面的配置，写完程序和Makefile文件后，在Emacs源代码窗口中按F7就可以进行编译。因为在my-c-mode-common-hook()函数里，有这么一行：

(define-key c-mode-base-map [(f7)] 'compile)

默认情况下，emacs的compile命令是调用make -k，我把它改成了make。你也可以把它改成其他的，比如gcc之类的。改下面的“make”就行了。

'(compile-command "make")

Emacs会划分一个窗格显示编译的消息，在编译结束后，emacs会自动将编译器的输出和程序关联起来，告诉你第几行的程序有问题。直接在出错的
行号上按Enter，就可以跳转到相应文件的相应行。其实我通常都是用鼠标中键去点出错行号:)

搞定了编译错误后，接着要和逻辑错误斗争了。其实对简单的程序来说，把中间结果打印到终端是最简单好用的调试办法:)不过稍微复杂点的程序
就会晕菜了，这时我们就需要拿gdb跟踪程序流程了。

你用下面的命令就可以启动gdb了。

M-x gdb

通常我喜欢进入gdb-many-windows模式，这样就会把一个Frame划分为5个窗格，同时显示：gdb命令窗口，当前局部变量，程序文本，调用栈和断点
。

gdb的命令就不在这里说了，它的文档几乎到处都是。emacs把gdb的命令和快捷键做了绑定，对于常用的命令，还是输入快捷键比较方便。比如，
C-c C-n是Next line，C-c C-s是step in，其实用的最多的快捷键也就是这两个。

下面是我的gdb效果图：

GDB                                               

** 阅读代码

在emacs下读代码通常有三种工具，最简单的是etags，最复杂的是ecb（emacs code browser），位于中间的是cscope。

etags和ctags一样，只不过前者是用于emacs的，后者是用于vi的。我个人觉得etags功能稍稍显得不够用一点，当然，也可能是我用的不好:) 欢迎
大牛指导。

使用tags之前要先对源代码分析建立tags文件，在代码所在目录中运行：etags -R 即可。

我常用的就这几个命令和快捷键：

M-x visit-tags-table <RET> FILE <RET>   选择tags文件
M-. [TAG] <RET>                         访问标签
M-*                                     返回
C-u M-.                                 寻找标签的下一个定义

ecb据说功能强大，但是太复杂了，我懒得折腾它。谁搞定了教教我吧:) 下面是一张ecb的效果图。

cscope是我感觉比较合适的一个工具。它其实是一个独立的软件，完全可以脱离vi和emacs使用。但是结合emacs的强大功能，cscope就显得更加方
便了。GNU Emacs默认自带cscope的支持。在使用之前，cscope也需要对代码进行索引。在emacs中可以这样做：

C-c s a             设定初始化的目录，一般是你代码的根目录
C-s s I             对目录中的相关文件建立列表并进行索引

建完索引之后，你就可以用cscope在代码里游荡了。常用的一些命令如下：

C-c s s             序找符号
C-c s g             寻找全局的定义
C-c s c             看看指定函数被哪些函数所调用
C-c s C             看看指定函数调用了哪些函数
C-c s e             寻找正则表达式
C-c s f             寻找文件
C-c s i             看看指定的文件被哪些文件include

上面这些快捷键其实我自己也常常记不全，没关系，抬头看看上面的菜单栏，有一栏就是Cscope，这些命令里头都有:)

贴一个cscope的效果图吧:

cscope                                            

写完了。希望这篇文章对您能有一些用处。有问题或建议可以和我联系。

Author: Le Cao

Date: 2010-10-12 19:18:45 CST

HTML generated by org-mode TAG=7.01g in emacs 23


* emacs 仅在在c-mode下面设定快捷键

我想在c-mode下面设定快捷键，绑定中注释和去掉注释函数(comment-region和uncomment-region)例如绑定到C-c c和C-c u, 在c-mode模式被启用
的时候再启用快捷键，不是全局绑定，怎么做到呢？

在网上查了一堆英文资料，终于搞定了。看代码

(eval-after-load "cc-mode"
  '(progn
     (define-key c-mode-map (kbd "C-c c") 'comment-region)
     (define-key c++-mode-map (kbd "C-c c") 'comment-region)
     (define-key c-mode-map (kbd "C-c u") 'uncomment-region)
     (define-key c++-mode-map (kbd "C-c u") 'uncomment-region)))

要是有elisp的代码高亮和缩进就好了。



* emacs中cc-mode的缩进配置方法详解（原创）

    emacs的初学者首先应该用到的就是语法高亮和代码缩进配置了，代码缩进的配置一般来讲是使用cc-mode。网上有不少已经配置好的配置文件
，但这些配置文件中所设置的代码缩进风格并不一定适用于每个人。而对于如何配置缩进，资料比较少。我就自己的配置文件详细解释一下。
    首先要说几个关于缩进的概念，cc-mode关于缩进有几个部分：
    全局的基本设置：
c-basic-offset：设置缩进的基本单位，2字符，4字符等。
tab-width：设置一个tab键的缩进字符。
c-default-style：在没有相关匹配的style时默认调用的style。
    cc-mode中可以设置自己的style，缩进风格就是在此设置，然后style配置完成之后应该将你的style加入到对应的hook中，所谓hook就是对应
于不同语言的不同的缩进”钩子“。cc-mode中常用的有两种，一个是c-initialization-hook，另一个是c-mode-common-hook。这两个hook都是全局
的，而对应于不同的语言会有不同的特殊hook，如下：
— Variable: c-mode-hook
— Variable: c++-mode-hook
— Variable: objc-mode-hook
— Variable: java-mode-hook
— Variable: idl-mode-hook
— Variable: pike-mode-hook
— Variable: awk-mode-hook
    名字显而易见，不同的语言有着不同的hook。
    cc-mode进行代码缩进的原理就是对程序语言进行一定的语义分析，然后对语言中不同的标签可以进行不同的缩进设置，这些缩进标签就对应于
c-offsets-alisit。对于代码缩进的多少，cc-mode有如下规定：
One of the symbols +, -, ++, --, *, or /

These special symbols describe a relative offset in multiples of c-basic-offset:

By defining a style's indentation in terms of c-basic-offset, you can change the amount of whitespace given to an indentation
level while maintaining the same basic shape of your code. Here are the values that the special symbols correspond to:

+        c-basic-offset times 1
-        c-basic-offset times -1
++      c-basic-offset times 2
--   c-basic-offset times -2
 *        c-basic-offset times 0.5
/        c-basic-offset times -0.5
        下面这个快捷键非常有用：C-c C-s。它是查看当前光标所在处的缩进标签的，举个例子：
        if (a > 0)
            {
                a = 3;
            }
          你想让这两个括号与if同列，那么就可以把光标放在那个”{"上，然后按C-c C-s，emacs会显示它的缩进标签：(substatement-open
    xxx)。好了，那么你就知道这个缩进所对应的cc-mode标签是substatement-open，然后你就可以在你的style中设置这个substatement-open变
    量了。就这个例子而言，现在它的值应该是+，即缩进一个基本单位。按照你的要求，将它设置为0即可。即加入：(substatement-open . 0)。
        或者还有一种更为直接的方式，cc-mode的Manual把它称为是交互式设置，就是直接在光标所在处使用快捷键C-c C-o，然后它就会让你设
    置这个点所对应的变量，直接输入+、-、++、--、/、*即可完成设置。设置完成后，可以用C-c C-q来查看缩进效果。不过这种方式好像在
    emacs重启之后会失效，所以还是建议定义自己的style。
        众所周知，不同的代码风格如linux和bsd、K&R对于括号的放置位置也是有不同的，这个对就于变量c-hanging-braces-alist。有了上面那
    些知识，就可以根据你自己不同的代码风格用C-c C-s查看不同的标签后开始设置你自己的缩进风格了，下面开始定义自己的style：
    ;;Create MyCppStyle
    (defconst MyCppStyle
    '((c-tab-always-indent . t)
        (c-comment-only-line-offset . 0)
            (c-hanging-braces-alist . ((substatement-open after)
                                                  (brace-list-open)))
            (c-cleanup-list . (comment-close-slash
                                     compact-empty-funcall))
        (c-offsets-alist . ((substatement-open . 0)
                                                    (innamespace . 0)                           ;;在namespace中不缩进
                                                    (case-label      . +)                          ;;case标签缩进一个
    c-basic-offset单位
                                                    (access-label . -)                             ;;private/public等标签少缩进一
    单位
                                                    (inline-open . 0)                             ;;在.h文件中写函数，括号不缩进
                                                    (block-open     . 0)))                       ;;在一个新块开始时不缩进
    ;;    (c-echo-syntactic-information-p t)
            (setq comment-start "/*"
                      comment-end "*/")
        (setq indent-tabs-mode nil))
        "My Cpp Coding Style")
    (c-add-style "MyCppStyle" MyCppStyle)                   ;;定义完自己的style，将其添加到cc-mode的style中。
;;Define own hook
    (defun MyCppHook ()
    (company-mode)
    (setq indent-tabs-mode nil)
    (setq global-hl-line-mode t)
    (c-set-style "MyCppStyle"))                                   ;;设置这个hook对应于MyCppStyle
    (add-hook 'c++-mode-hook 'MyCppHook)                ;;将此hook应用于所有的c++模式。
        最后，可以设置对于不同的文件绑定不同的模式，可以用以下语句实现：
    ;;set *.h and *.c and *.cpp files use c++ mode
    (setq auto-mode-alist
          (cons '("" . c++-mode) auto-mode-alist))
    (setq auto-mode-alist
          (cons '("" . c++-mode) auto-mode-alist))
    (setq auto-mode-alist
          (cons '("" . c++-mode) auto-mode-alist))
       至此，缩进模式配置完毕。上面这些配置对应的缩进风格如下图：
    [c44022]

